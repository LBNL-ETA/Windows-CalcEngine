#include <memory>
#include <gtest/gtest.h>

#include <WCESpectralAveraging.hpp>
#include <WCEMultiLayerOptics.hpp>
#include <WCESingleLayerOptics.hpp>
#include <WCECommon.hpp>

#include "../../../helper/optical/spectralSampleData.hpp"
#include "../../../helper/optical/standardData.hpp"

using namespace SingleLayerOptics;
using namespace FenestrationCommon;
using namespace SpectralAveraging;
using namespace MultiLayerOptics;

// Example/test case on multilayer specular
// Difference from BSDF layer is that properties can be calculated at any custom angle

class EquivalentSpecularAngularDualLayer_102_103 : public testing::Test
{
    std::shared_ptr<CMultiPaneSpecular> m_Layer;

    static std::shared_ptr<CSpectralSampleData> loadGlassSample()
    {
        return SpectralAveraging::CSpectralSampleData::create({
          {0.300, {0, 0, 0.0476, 0.0476}, {0.0, 0.0, 0.0, 0.0}},
          {0.305, {0, 0, 0.0474, 0.0474}, {0.0, 0.0, 0.0, 0.0}},
          {0.310, {0.007, 0.007, 0.0471, 0.0471}, {0.0, 0.0, 0.0, 0.0}},
          {0.315, {0.035, 0.035, 0.047, 0.047}, {0.0, 0.0, 0.0, 0.0}},
          {0.320, {0.0975, 0.0975, 0.0472, 0.0472}, {0.0, 0.0, 0.0, 0.0}},
          {0.325, {0.2099, 0.2099, 0.0487, 0.0487}, {0.0, 0.0, 0.0, 0.0}},
          {0.330, {0.3497, 0.3497, 0.0525, 0.0525}, {0.0, 0.0, 0.0, 0.0}},
          {0.335, {0.4865, 0.4865, 0.0581, 0.0581}, {0.0, 0.0, 0.0, 0.0}},
          {0.340, {0.6057, 0.6057, 0.0644, 0.0644}, {0.0, 0.0, 0.0, 0.0}},
          {0.345, {0.7035, 0.7035, 0.0706, 0.0706}, {0.0, 0.0, 0.0, 0.0}},
          {0.350, {0.7687, 0.7687, 0.0751, 0.0751}, {0.0, 0.0, 0.0, 0.0}},
          {0.355, {0.812, 0.812, 0.0783, 0.0783}, {0.0, 0.0, 0.0, 0.0}},
          {0.360, {0.8429, 0.8429, 0.0806, 0.0806}, {0.0, 0.0, 0.0, 0.0}},
          {0.365, {0.862, 0.862, 0.0819, 0.0819}, {0.0, 0.0, 0.0, 0.0}},
          {0.370, {0.8678, 0.8678, 0.0821, 0.0821}, {0.0, 0.0, 0.0, 0.0}},
          {0.375, {0.8672, 0.8672, 0.0819, 0.0819}, {0.0, 0.0, 0.0, 0.0}},
          {0.380, {0.8554, 0.8554, 0.0806, 0.0806}, {0.0, 0.0, 0.0, 0.0}},
          {0.385, {0.8696, 0.8696, 0.0816, 0.0816}, {0.0, 0.0, 0.0, 0.0}},
          {0.390, {0.8804, 0.8804, 0.0823, 0.0823}, {0.0, 0.0, 0.0, 0.0}},
          {0.395, {0.8884, 0.8884, 0.0828, 0.0828}, {0.0, 0.0, 0.0, 0.0}},
          {0.400, {0.8924, 0.8924, 0.083, 0.083}, {0.0, 0.0, 0.0, 0.0}},
          {0.410, {0.8944, 0.8944, 0.0828, 0.0828}, {0.0, 0.0, 0.0, 0.0}},
          {0.420, {0.8921, 0.8921, 0.0823, 0.0823}, {0.0, 0.0, 0.0, 0.0}},
          {0.430, {0.8914, 0.8914, 0.082, 0.082}, {0.0, 0.0, 0.0, 0.0}},
          {0.440, {0.8896, 0.8896, 0.0815, 0.0815}, {0.0, 0.0, 0.0, 0.0}},
          {0.450, {0.8933, 0.8933, 0.0816, 0.0816}, {0.0, 0.0, 0.0, 0.0}},
          {0.460, {0.8972, 0.8972, 0.0817, 0.0817}, {0.0, 0.0, 0.0, 0.0}},
          {0.470, {0.8991, 0.8991, 0.0816, 0.0816}, {0.0, 0.0, 0.0, 0.0}},
          {0.480, {0.9013, 0.9013, 0.0816, 0.0816}, {0.0, 0.0, 0.0, 0.0}},
          {0.490, {0.9026, 0.9026, 0.0815, 0.0815}, {0.0, 0.0, 0.0, 0.0}},
          {0.500, {0.9026, 0.9026, 0.0813, 0.0813}, {0.0, 0.0, 0.0, 0.0}},
          {0.510, {0.9031, 0.9031, 0.0811, 0.0811}, {0.0, 0.0, 0.0, 0.0}},
          {0.520, {0.9025, 0.9025, 0.0809, 0.0809}, {0.0, 0.0, 0.0, 0.0}},
          {0.530, {0.9028, 0.9028, 0.0808, 0.0808}, {0.0, 0.0, 0.0, 0.0}},
          {0.540, {0.9033, 0.9033, 0.0807, 0.0807}, {0.0, 0.0, 0.0, 0.0}},
          {0.550, {0.9013, 0.9013, 0.0804, 0.0804}, {0.0, 0.0, 0.0, 0.0}},
          {0.560, {0.8999, 0.8999, 0.0802, 0.0802}, {0.0, 0.0, 0.0, 0.0}},
          {0.570, {0.8986, 0.8986, 0.0799, 0.0799}, {0.0, 0.0, 0.0, 0.0}},
          {0.580, {0.8975, 0.8975, 0.0797, 0.0797}, {0.0, 0.0, 0.0, 0.0}},
          {0.590, {0.8939, 0.8939, 0.0793, 0.0793}, {0.0, 0.0, 0.0, 0.0}},
          {0.600, {0.8919, 0.8919, 0.079, 0.079}, {0.0, 0.0, 0.0, 0.0}},
          {0.610, {0.891, 0.891, 0.0789, 0.0789}, {0.0, 0.0, 0.0, 0.0}},
          {0.620, {0.8853, 0.8853, 0.0783, 0.0783}, {0.0, 0.0, 0.0, 0.0}},
          {0.630, {0.8838, 0.8838, 0.0781, 0.0781}, {0.0, 0.0, 0.0, 0.0}},
          {0.640, {0.8806, 0.8806, 0.0777, 0.0777}, {0.0, 0.0, 0.0, 0.0}},
          {0.650, {0.8769, 0.8769, 0.0773, 0.0773}, {0.0, 0.0, 0.0, 0.0}},
          {0.660, {0.8735, 0.8735, 0.077, 0.077}, {0.0, 0.0, 0.0, 0.0}},
          {0.670, {0.8731, 0.8731, 0.0769, 0.0769}, {0.0, 0.0, 0.0, 0.0}},
          {0.680, {0.8665, 0.8665, 0.0763, 0.0763}, {0.0, 0.0, 0.0, 0.0}},
          {0.690, {0.8637, 0.8637, 0.076, 0.076}, {0.0, 0.0, 0.0, 0.0}},
          {0.700, {0.8607, 0.8607, 0.0757, 0.0757}, {0.0, 0.0, 0.0, 0.0}},
          {0.710, {0.8557, 0.8557, 0.0753, 0.0753}, {0.0, 0.0, 0.0, 0.0}},
          {0.720, {0.8531, 0.8531, 0.075, 0.075}, {0.0, 0.0, 0.0, 0.0}},
          {0.730, {0.8487, 0.8487, 0.0746, 0.0746}, {0.0, 0.0, 0.0, 0.0}},
          {0.740, {0.8418, 0.8418, 0.074, 0.074}, {0.0, 0.0, 0.0, 0.0}},
          {0.750, {0.8406, 0.8406, 0.0738, 0.0738}, {0.0, 0.0, 0.0, 0.0}},
          {0.760, {0.8358, 0.8358, 0.0734, 0.0734}, {0.0, 0.0, 0.0, 0.0}},
          {0.770, {0.8341, 0.8341, 0.0732, 0.0732}, {0.0, 0.0, 0.0, 0.0}},
          {0.780, {0.8324, 0.8324, 0.073, 0.073}, {0.0, 0.0, 0.0, 0.0}},
          {0.790, {0.8232, 0.8232, 0.0723, 0.0723}, {0.0, 0.0, 0.0, 0.0}},
          {0.800, {0.8246, 0.8246, 0.0723, 0.0723}, {0.0, 0.0, 0.0, 0.0}},
          {0.850, {0.8076, 0.8076, 0.0708, 0.0708}, {0.0, 0.0, 0.0, 0.0}},
          {0.900, {0.8002, 0.8002, 0.07, 0.07}, {0.0, 0.0, 0.0, 0.0}},
          {0.950, {0.7907, 0.7907, 0.0692, 0.0692}, {0.0, 0.0, 0.0, 0.0}},
          {1.000, {0.7862, 0.7862, 0.0687, 0.0687}, {0.0, 0.0, 0.0, 0.0}},
          {1.050, {0.7849, 0.7849, 0.0685, 0.0685}, {0.0, 0.0, 0.0, 0.0}},
          {1.100, {0.7848, 0.7848, 0.0683, 0.0683}, {0.0, 0.0, 0.0, 0.0}},
          {1.150, {0.7864, 0.7864, 0.0683, 0.0683}, {0.0, 0.0, 0.0, 0.0}},
          {1.200, {0.7894, 0.7894, 0.0685, 0.0685}, {0.0, 0.0, 0.0, 0.0}},
          {1.250, {0.7944, 0.7944, 0.0687, 0.0687}, {0.0, 0.0, 0.0, 0.0}},
          {1.300, {0.8014, 0.8014, 0.0691, 0.0691}, {0.0, 0.0, 0.0, 0.0}},
          {1.350, {0.8088, 0.8088, 0.0695, 0.0695}, {0.0, 0.0, 0.0, 0.0}},
          {1.400, {0.8168, 0.8168, 0.07, 0.07}, {0.0, 0.0, 0.0, 0.0}},
          {1.450, {0.8261, 0.8261, 0.0705, 0.0705}, {0.0, 0.0, 0.0, 0.0}},
          {1.500, {0.8366, 0.8366, 0.0712, 0.0712}, {0.0, 0.0, 0.0, 0.0}},
          {1.550, {0.8444, 0.8444, 0.0716, 0.0716}, {0.0, 0.0, 0.0, 0.0}},
          {1.600, {0.8506, 0.8506, 0.0719, 0.0719}, {0.0, 0.0, 0.0, 0.0}},
          {1.650, {0.853, 0.853, 0.072, 0.072}, {0.0, 0.0, 0.0, 0.0}},
          {1.700, {0.8527, 0.8527, 0.0719, 0.0719}, {0.0, 0.0, 0.0, 0.0}},
          {1.750, {0.8532, 0.8532, 0.0718, 0.0718}, {0.0, 0.0, 0.0, 0.0}},
          {1.800, {0.8504, 0.8504, 0.0714, 0.0714}, {0.0, 0.0, 0.0, 0.0}},
          {1.850, {0.8488, 0.8488, 0.0712, 0.0712}, {0.0, 0.0, 0.0, 0.0}},
          {1.900, {0.8523, 0.8523, 0.0713, 0.0713}, {0.0, 0.0, 0.0, 0.0}},
          {1.950, {0.8497, 0.8497, 0.071, 0.071}, {0.0, 0.0, 0.0, 0.0}},
          {2.000, {0.848, 0.848, 0.0708, 0.0708}, {0.0, 0.0, 0.0, 0.0}},
          {2.050, {0.8488, 0.8488, 0.0707, 0.0707}, {0.0, 0.0, 0.0, 0.0}},
          {2.100, {0.8505, 0.8505, 0.0707, 0.0707}, {0.0, 0.0, 0.0, 0.0}},
          {2.150, {0.8408, 0.8408, 0.0699, 0.0699}, {0.0, 0.0, 0.0, 0.0}},
          {2.200, {0.8304, 0.8304, 0.0691, 0.0691}, {0.0, 0.0, 0.0, 0.0}},
          {2.250, {0.8277, 0.8277, 0.0688, 0.0688}, {0.0, 0.0, 0.0, 0.0}},
          {2.300, {0.8303, 0.8303, 0.0688, 0.0688}, {0.0, 0.0, 0.0, 0.0}},
          {2.350, {0.834, 0.834, 0.069, 0.069}, {0.0, 0.0, 0.0, 0.0}},
          {2.400, {0.8236, 0.8236, 0.0681, 0.0681}, {0.0, 0.0, 0.0, 0.0}},
          {2.450, {0.8225, 0.8225, 0.0679, 0.0679}, {0.0, 0.0, 0.0, 0.0}},
          {2.500, {0.8184, 0.8184, 0.0675, 0.0675}, {0.0, 0.0, 0.0, 0.0}},
        });
    }

    static std::shared_ptr<CSingleAngularMeasurement> getSample1()
    {
        auto aSolarRadiation{StandardData::solarRadiationASTM_E891_87_Table1()};

        std::shared_ptr<CSpectralSampleData> aMeasurements0 = CSpectralSampleData::create({
          {0.290, {0, 0, 0.0474, 0.0474}, {0.0, 0.0, 0.0, 0.0}},
          {0.295, {0, 0, 0.0475, 0.0475}, {0.0, 0.0, 0.0, 0.0}},
          {0.300, {0, 0, 0.0476, 0.0476}, {0.0, 0.0, 0.0, 0.0}},
          {0.305, {0, 0, 0.0474, 0.0474}, {0.0, 0.0, 0.0, 0.0}},
          {0.310, {0.007, 0.007, 0.0471, 0.0471}, {0.0, 0.0, 0.0, 0.0}},
          {0.315, {0.035, 0.035, 0.047, 0.047}, {0.0, 0.0, 0.0, 0.0}},
          {0.320, {0.0975, 0.0975, 0.0472, 0.0472}, {0.0, 0.0, 0.0, 0.0}},
          {0.325, {0.2099, 0.2099, 0.0487, 0.0487}, {0.0, 0.0, 0.0, 0.0}},
          {0.330, {0.3497, 0.3497, 0.0525, 0.0525}, {0.0, 0.0, 0.0, 0.0}},
          {0.335, {0.4865, 0.4865, 0.0581, 0.0581}, {0.0, 0.0, 0.0, 0.0}},
          {0.340, {0.6057, 0.6057, 0.0644, 0.0644}, {0.0, 0.0, 0.0, 0.0}},
          {0.345, {0.7035, 0.7035, 0.0706, 0.0706}, {0.0, 0.0, 0.0, 0.0}},
          {0.350, {0.7687, 0.7687, 0.0751, 0.0751}, {0.0, 0.0, 0.0, 0.0}},
          {0.355, {0.812, 0.812, 0.0783, 0.0783}, {0.0, 0.0, 0.0, 0.0}},
          {0.360, {0.8429, 0.8429, 0.0806, 0.0806}, {0.0, 0.0, 0.0, 0.0}},
          {0.365, {0.862, 0.862, 0.0819, 0.0819}, {0.0, 0.0, 0.0, 0.0}},
          {0.370, {0.8678, 0.8678, 0.0821, 0.0821}, {0.0, 0.0, 0.0, 0.0}},
          {0.375, {0.8672, 0.8672, 0.0819, 0.0819}, {0.0, 0.0, 0.0, 0.0}},
          {0.380, {0.8554, 0.8554, 0.0806, 0.0806}, {0.0, 0.0, 0.0, 0.0}},
          {0.385, {0.8696, 0.8696, 0.0816, 0.0816}, {0.0, 0.0, 0.0, 0.0}},
          {0.390, {0.8804, 0.8804, 0.0823, 0.0823}, {0.0, 0.0, 0.0, 0.0}},
          {0.395, {0.8884, 0.8884, 0.0828, 0.0828}, {0.0, 0.0, 0.0, 0.0}},
          {0.400, {0.8924, 0.8924, 0.083, 0.083}, {0.0, 0.0, 0.0, 0.0}},
          {0.410, {0.8944, 0.8944, 0.0828, 0.0828}, {0.0, 0.0, 0.0, 0.0}},
          {0.420, {0.8921, 0.8921, 0.0823, 0.0823}, {0.0, 0.0, 0.0, 0.0}},
          {0.430, {0.8914, 0.8914, 0.082, 0.082}, {0.0, 0.0, 0.0, 0.0}},
          {0.440, {0.8896, 0.8896, 0.0815, 0.0815}, {0.0, 0.0, 0.0, 0.0}},
          {0.450, {0.8933, 0.8933, 0.0816, 0.0816}, {0.0, 0.0, 0.0, 0.0}},
          {0.460, {0.8972, 0.8972, 0.0817, 0.0817}, {0.0, 0.0, 0.0, 0.0}},
          {0.470, {0.8991, 0.8991, 0.0816, 0.0816}, {0.0, 0.0, 0.0, 0.0}},
          {0.480, {0.9013, 0.9013, 0.0816, 0.0816}, {0.0, 0.0, 0.0, 0.0}},
          {0.490, {0.9026, 0.9026, 0.0815, 0.0815}, {0.0, 0.0, 0.0, 0.0}},
          {0.500, {0.9026, 0.9026, 0.0813, 0.0813}, {0.0, 0.0, 0.0, 0.0}},
          {0.510, {0.9031, 0.9031, 0.0811, 0.0811}, {0.0, 0.0, 0.0, 0.0}},
          {0.520, {0.9025, 0.9025, 0.0809, 0.0809}, {0.0, 0.0, 0.0, 0.0}},
          {0.530, {0.9028, 0.9028, 0.0808, 0.0808}, {0.0, 0.0, 0.0, 0.0}},
          {0.540, {0.9033, 0.9033, 0.0807, 0.0807}, {0.0, 0.0, 0.0, 0.0}},
          {0.550, {0.9013, 0.9013, 0.0804, 0.0804}, {0.0, 0.0, 0.0, 0.0}},
          {0.560, {0.8999, 0.8999, 0.0802, 0.0802}, {0.0, 0.0, 0.0, 0.0}},
          {0.570, {0.8986, 0.8986, 0.0799, 0.0799}, {0.0, 0.0, 0.0, 0.0}},
          {0.580, {0.8975, 0.8975, 0.0797, 0.0797}, {0.0, 0.0, 0.0, 0.0}},
          {0.590, {0.8939, 0.8939, 0.0793, 0.0793}, {0.0, 0.0, 0.0, 0.0}},
          {0.600, {0.8919, 0.8919, 0.079, 0.079}, {0.0, 0.0, 0.0, 0.0}},
          {0.610, {0.891, 0.891, 0.0789, 0.0789}, {0.0, 0.0, 0.0, 0.0}},
          {0.620, {0.8853, 0.8853, 0.0783, 0.0783}, {0.0, 0.0, 0.0, 0.0}},
          {0.630, {0.8838, 0.8838, 0.0781, 0.0781}, {0.0, 0.0, 0.0, 0.0}},
          {0.640, {0.8806, 0.8806, 0.0777, 0.0777}, {0.0, 0.0, 0.0, 0.0}},
          {0.650, {0.8769, 0.8769, 0.0773, 0.0773}, {0.0, 0.0, 0.0, 0.0}},
          {0.660, {0.8735, 0.8735, 0.077, 0.077}, {0.0, 0.0, 0.0, 0.0}},
          {0.670, {0.8731, 0.8731, 0.0769, 0.0769}, {0.0, 0.0, 0.0, 0.0}},
          {0.680, {0.8665, 0.8665, 0.0763, 0.0763}, {0.0, 0.0, 0.0, 0.0}},
          {0.690, {0.8637, 0.8637, 0.076, 0.076}, {0.0, 0.0, 0.0, 0.0}},
          {0.700, {0.8607, 0.8607, 0.0757, 0.0757}, {0.0, 0.0, 0.0, 0.0}},
          {0.710, {0.8557, 0.8557, 0.0753, 0.0753}, {0.0, 0.0, 0.0, 0.0}},
          {0.720, {0.8531, 0.8531, 0.075, 0.075}, {0.0, 0.0, 0.0, 0.0}},
          {0.730, {0.8487, 0.8487, 0.0746, 0.0746}, {0.0, 0.0, 0.0, 0.0}},
          {0.740, {0.8418, 0.8418, 0.074, 0.074}, {0.0, 0.0, 0.0, 0.0}},
          {0.750, {0.8406, 0.8406, 0.0738, 0.0738}, {0.0, 0.0, 0.0, 0.0}},
          {0.760, {0.8358, 0.8358, 0.0734, 0.0734}, {0.0, 0.0, 0.0, 0.0}},
          {0.770, {0.8341, 0.8341, 0.0732, 0.0732}, {0.0, 0.0, 0.0, 0.0}},
          {0.780, {0.8324, 0.8324, 0.073, 0.073}, {0.0, 0.0, 0.0, 0.0}},
          {0.790, {0.8232, 0.8232, 0.0723, 0.0723}, {0.0, 0.0, 0.0, 0.0}},
          {0.800, {0.8246, 0.8246, 0.0723, 0.0723}, {0.0, 0.0, 0.0, 0.0}},
          {0.850, {0.8076, 0.8076, 0.0708, 0.0708}, {0.0, 0.0, 0.0, 0.0}},
          {0.900, {0.8002, 0.8002, 0.07, 0.07}, {0.0, 0.0, 0.0, 0.0}},
          {0.950, {0.7907, 0.7907, 0.0692, 0.0692}, {0.0, 0.0, 0.0, 0.0}},
          {1.000, {0.7862, 0.7862, 0.0687, 0.0687}, {0.0, 0.0, 0.0, 0.0}},
          {1.050, {0.7849, 0.7849, 0.0685, 0.0685}, {0.0, 0.0, 0.0, 0.0}},
          {1.100, {0.7848, 0.7848, 0.0683, 0.0683}, {0.0, 0.0, 0.0, 0.0}},
          {1.150, {0.7864, 0.7864, 0.0683, 0.0683}, {0.0, 0.0, 0.0, 0.0}},
          {1.200, {0.7894, 0.7894, 0.0685, 0.0685}, {0.0, 0.0, 0.0, 0.0}},
          {1.250, {0.7944, 0.7944, 0.0687, 0.0687}, {0.0, 0.0, 0.0, 0.0}},
          {1.300, {0.8014, 0.8014, 0.0691, 0.0691}, {0.0, 0.0, 0.0, 0.0}},
          {1.350, {0.8088, 0.8088, 0.0695, 0.0695}, {0.0, 0.0, 0.0, 0.0}},
          {1.400, {0.8168, 0.8168, 0.07, 0.07}, {0.0, 0.0, 0.0, 0.0}},
          {1.450, {0.8261, 0.8261, 0.0705, 0.0705}, {0.0, 0.0, 0.0, 0.0}},
          {1.500, {0.8366, 0.8366, 0.0712, 0.0712}, {0.0, 0.0, 0.0, 0.0}},
          {1.550, {0.8444, 0.8444, 0.0716, 0.0716}, {0.0, 0.0, 0.0, 0.0}},
          {1.600, {0.8506, 0.8506, 0.0719, 0.0719}, {0.0, 0.0, 0.0, 0.0}},
          {1.650, {0.853, 0.853, 0.072, 0.072}, {0.0, 0.0, 0.0, 0.0}},
          {1.700, {0.8527, 0.8527, 0.0719, 0.0719}, {0.0, 0.0, 0.0, 0.0}},
          {1.750, {0.8532, 0.8532, 0.0718, 0.0718}, {0.0, 0.0, 0.0, 0.0}},
          {1.800, {0.8504, 0.8504, 0.0714, 0.0714}, {0.0, 0.0, 0.0, 0.0}},
          {1.850, {0.8488, 0.8488, 0.0712, 0.0712}, {0.0, 0.0, 0.0, 0.0}},
          {1.900, {0.8523, 0.8523, 0.0713, 0.0713}, {0.0, 0.0, 0.0, 0.0}},
          {1.950, {0.8497, 0.8497, 0.071, 0.071}, {0.0, 0.0, 0.0, 0.0}},
          {2.000, {0.848, 0.848, 0.0708, 0.0708}, {0.0, 0.0, 0.0, 0.0}},
          {2.050, {0.8488, 0.8488, 0.0707, 0.0707}, {0.0, 0.0, 0.0, 0.0}},
          {2.100, {0.8505, 0.8505, 0.0707, 0.0707}, {0.0, 0.0, 0.0, 0.0}},
          {2.150, {0.8408, 0.8408, 0.0699, 0.0699}, {0.0, 0.0, 0.0, 0.0}},
          {2.200, {0.8304, 0.8304, 0.0691, 0.0691}, {0.0, 0.0, 0.0, 0.0}},
          {2.250, {0.8277, 0.8277, 0.0688, 0.0688}, {0.0, 0.0, 0.0, 0.0}},
          {2.300, {0.8303, 0.8303, 0.0688, 0.0688}, {0.0, 0.0, 0.0, 0.0}},
          {2.350, {0.834, 0.834, 0.069, 0.069}, {0.0, 0.0, 0.0, 0.0}},
          {2.400, {0.8236, 0.8236, 0.0681, 0.0681}, {0.0, 0.0, 0.0, 0.0}},
          {2.450, {0.8225, 0.8225, 0.0679, 0.0679}, {0.0, 0.0, 0.0, 0.0}},
          {2.500, {0.8184, 0.8184, 0.0675, 0.0675}, {0.0, 0.0, 0.0, 0.0}},
        });

        std::shared_ptr<CSpectralSample> aSample0 =
          std::make_shared<CSpectralSample>(aMeasurements0, aSolarRadiation);
        std::shared_ptr<CSingleAngularMeasurement> aAngular0 =
          std::make_shared<CSingleAngularMeasurement>(aSample0, 0.0);

        return aAngular0;
    }

    static std::shared_ptr<CSingleAngularMeasurement> getSample2()
    {
        auto aSolarRadiation = StandardData::solarRadiationASTM_E891_87_Table1();

        std::shared_ptr<CSpectralSampleData> aMeasurements1 = CSpectralSampleData::create({
          {0.290, {0, 0, 0.0474, 0.0474}, {0.0, 0.0, 0.0, 0.0}},
          {0.295, {0, 0, 0.0475, 0.0475}, {0.0, 0.0, 0.0, 0.0}},
          {0.300, {0, 0, 0.0476, 0.0476}, {0.0, 0.0, 0.0, 0.0}},
          {0.305, {0, 0, 0.0474, 0.0474}, {0.0, 0.0, 0.0, 0.0}},
          {0.310, {0.0068, 0.0068, 0.0471, 0.0471}, {0.0, 0.0, 0.0, 0.0}},
          {0.315, {0.0343, 0.0343, 0.047, 0.047}, {0.0, 0.0, 0.0, 0.0}},
          {0.320, {0.0961, 0.0961, 0.0472, 0.0472}, {0.0, 0.0, 0.0, 0.0}},
          {0.325, {0.208, 0.208, 0.0487, 0.0487}, {0.0, 0.0, 0.0, 0.0}},
          {0.330, {0.3476, 0.3476, 0.0524, 0.0524}, {0.0, 0.0, 0.0, 0.0}},
          {0.335, {0.4845, 0.4845, 0.058, 0.058}, {0.0, 0.0, 0.0, 0.0}},
          {0.340, {0.6041, 0.6041, 0.0643, 0.0643}, {0.0, 0.0, 0.0, 0.0}},
          {0.345, {0.7023, 0.7023, 0.0705, 0.0705}, {0.0, 0.0, 0.0, 0.0}},
          {0.350, {0.7678, 0.7678, 0.0751, 0.0751}, {0.0, 0.0, 0.0, 0.0}},
          {0.355, {0.8114, 0.8114, 0.0783, 0.0783}, {0.0, 0.0, 0.0, 0.0}},
          {0.360, {0.8424, 0.8424, 0.0805, 0.0805}, {0.0, 0.0, 0.0, 0.0}},
          {0.365, {0.8617, 0.8617, 0.0819, 0.0819}, {0.0, 0.0, 0.0, 0.0}},
          {0.370, {0.8675, 0.8675, 0.0821, 0.0821}, {0.0, 0.0, 0.0, 0.0}},
          {0.375, {0.8669, 0.8669, 0.0819, 0.0819}, {0.0, 0.0, 0.0, 0.0}},
          {0.380, {0.8551, 0.8551, 0.0806, 0.0806}, {0.0, 0.0, 0.0, 0.0}},
          {0.385, {0.8693, 0.8693, 0.0816, 0.0816}, {0.0, 0.0, 0.0, 0.0}},
          {0.390, {0.8802, 0.8802, 0.0823, 0.0823}, {0.0, 0.0, 0.0, 0.0}},
          {0.395, {0.8882, 0.8882, 0.0829, 0.0829}, {0.0, 0.0, 0.0, 0.0}},
          {0.400, {0.8922, 0.8922, 0.083, 0.083}, {0.0, 0.0, 0.0, 0.0}},
          {0.410, {0.8943, 0.8943, 0.0829, 0.0829}, {0.0, 0.0, 0.0, 0.0}},
          {0.420, {0.8919, 0.8919, 0.0823, 0.0823}, {0.0, 0.0, 0.0, 0.0}},
          {0.430, {0.8912, 0.8912, 0.082, 0.082}, {0.0, 0.0, 0.0, 0.0}},
          {0.440, {0.8894, 0.8894, 0.0815, 0.0815}, {0.0, 0.0, 0.0, 0.0}},
          {0.450, {0.8931, 0.8931, 0.0816, 0.0816}, {0.0, 0.0, 0.0, 0.0}},
          {0.460, {0.8971, 0.8971, 0.0817, 0.0817}, {0.0, 0.0, 0.0, 0.0}},
          {0.470, {0.8989, 0.8989, 0.0816, 0.0816}, {0.0, 0.0, 0.0, 0.0}},
          {0.480, {0.9011, 0.9011, 0.0816, 0.0816}, {0.0, 0.0, 0.0, 0.0}},
          {0.490, {0.9025, 0.9025, 0.0815, 0.0815}, {0.0, 0.0, 0.0, 0.0}},
          {0.500, {0.9025, 0.9025, 0.0813, 0.0813}, {0.0, 0.0, 0.0, 0.0}},
          {0.510, {0.903, 0.903, 0.0812, 0.0812}, {0.0, 0.0, 0.0, 0.0}},
          {0.520, {0.9024, 0.9024, 0.0809, 0.0809}, {0.0, 0.0, 0.0, 0.0}},
          {0.530, {0.9027, 0.9027, 0.0808, 0.0808}, {0.0, 0.0, 0.0, 0.0}},
          {0.540, {0.9032, 0.9032, 0.0807, 0.0807}, {0.0, 0.0, 0.0, 0.0}},
          {0.550, {0.9011, 0.9011, 0.0804, 0.0804}, {0.0, 0.0, 0.0, 0.0}},
          {0.560, {0.8998, 0.8998, 0.0802, 0.0802}, {0.0, 0.0, 0.0, 0.0}},
          {0.570, {0.8985, 0.8985, 0.0799, 0.0799}, {0.0, 0.0, 0.0, 0.0}},
          {0.580, {0.8974, 0.8974, 0.0797, 0.0797}, {0.0, 0.0, 0.0, 0.0}},
          {0.590, {0.8937, 0.8937, 0.0793, 0.0793}, {0.0, 0.0, 0.0, 0.0}},
          {0.600, {0.8917, 0.8917, 0.079, 0.079}, {0.0, 0.0, 0.0, 0.0}},
          {0.610, {0.8908, 0.8908, 0.0789, 0.0789}, {0.0, 0.0, 0.0, 0.0}},
          {0.620, {0.885, 0.885, 0.0783, 0.0783}, {0.0, 0.0, 0.0, 0.0}},
          {0.630, {0.8835, 0.8835, 0.0781, 0.0781}, {0.0, 0.0, 0.0, 0.0}},
          {0.640, {0.8803, 0.8803, 0.0777, 0.0777}, {0.0, 0.0, 0.0, 0.0}},
          {0.650, {0.8766, 0.8766, 0.0774, 0.0774}, {0.0, 0.0, 0.0, 0.0}},
          {0.660, {0.8732, 0.8732, 0.077, 0.077}, {0.0, 0.0, 0.0, 0.0}},
          {0.670, {0.8728, 0.8728, 0.0769, 0.0769}, {0.0, 0.0, 0.0, 0.0}},
          {0.680, {0.8662, 0.8662, 0.0763, 0.0763}, {0.0, 0.0, 0.0, 0.0}},
          {0.690, {0.8633, 0.8633, 0.076, 0.076}, {0.0, 0.0, 0.0, 0.0}},
          {0.700, {0.8603, 0.8603, 0.0757, 0.0757}, {0.0, 0.0, 0.0, 0.0}},
          {0.710, {0.8552, 0.8552, 0.0753, 0.0753}, {0.0, 0.0, 0.0, 0.0}},
          {0.720, {0.8527, 0.8527, 0.075, 0.075}, {0.0, 0.0, 0.0, 0.0}},
          {0.730, {0.8482, 0.8482, 0.0746, 0.0746}, {0.0, 0.0, 0.0, 0.0}},
          {0.740, {0.8413, 0.8413, 0.074, 0.074}, {0.0, 0.0, 0.0, 0.0}},
          {0.750, {0.8401, 0.8401, 0.0738, 0.0738}, {0.0, 0.0, 0.0, 0.0}},
          {0.760, {0.8352, 0.8352, 0.0734, 0.0734}, {0.0, 0.0, 0.0, 0.0}},
          {0.770, {0.8335, 0.8335, 0.0732, 0.0732}, {0.0, 0.0, 0.0, 0.0}},
          {0.780, {0.8318, 0.8318, 0.073, 0.073}, {0.0, 0.0, 0.0, 0.0}},
          {0.790, {0.8225, 0.8225, 0.0722, 0.0722}, {0.0, 0.0, 0.0, 0.0}},
          {0.800, {0.824, 0.824, 0.0723, 0.0723}, {0.0, 0.0, 0.0, 0.0}},
          {0.850, {0.8069, 0.8069, 0.0708, 0.0708}, {0.0, 0.0, 0.0, 0.0}},
          {0.900, {0.7994, 0.7994, 0.07, 0.07}, {0.0, 0.0, 0.0, 0.0}},
          {0.950, {0.7899, 0.7899, 0.0691, 0.0691}, {0.0, 0.0, 0.0, 0.0}},
          {1.000, {0.7854, 0.7854, 0.0686, 0.0686}, {0.0, 0.0, 0.0, 0.0}},
          {1.050, {0.7841, 0.7841, 0.0684, 0.0684}, {0.0, 0.0, 0.0, 0.0}},
          {1.100, {0.7839, 0.7839, 0.0683, 0.0683}, {0.0, 0.0, 0.0, 0.0}},
          {1.150, {0.7856, 0.7856, 0.0683, 0.0683}, {0.0, 0.0, 0.0, 0.0}},
          {1.200, {0.7886, 0.7886, 0.0684, 0.0684}, {0.0, 0.0, 0.0, 0.0}},
          {1.250, {0.7936, 0.7936, 0.0687, 0.0687}, {0.0, 0.0, 0.0, 0.0}},
          {1.300, {0.8006, 0.8006, 0.069, 0.069}, {0.0, 0.0, 0.0, 0.0}},
          {1.350, {0.8081, 0.8081, 0.0695, 0.0695}, {0.0, 0.0, 0.0, 0.0}},
          {1.400, {0.8162, 0.8162, 0.0699, 0.0699}, {0.0, 0.0, 0.0, 0.0}},
          {1.450, {0.8255, 0.8255, 0.0705, 0.0705}, {0.0, 0.0, 0.0, 0.0}},
          {1.500, {0.836, 0.836, 0.0711, 0.0711}, {0.0, 0.0, 0.0, 0.0}},
          {1.550, {0.8439, 0.8439, 0.0716, 0.0716}, {0.0, 0.0, 0.0, 0.0}},
          {1.600, {0.8501, 0.8501, 0.0719, 0.0719}, {0.0, 0.0, 0.0, 0.0}},
          {1.650, {0.8525, 0.8525, 0.072, 0.072}, {0.0, 0.0, 0.0, 0.0}},
          {1.700, {0.8522, 0.8522, 0.0719, 0.0719}, {0.0, 0.0, 0.0, 0.0}},
          {1.750, {0.8527, 0.8527, 0.0718, 0.0718}, {0.0, 0.0, 0.0, 0.0}},
          {1.800, {0.8499, 0.8499, 0.0714, 0.0714}, {0.0, 0.0, 0.0, 0.0}},
          {1.850, {0.8483, 0.8483, 0.0712, 0.0712}, {0.0, 0.0, 0.0, 0.0}},
          {1.900, {0.8518, 0.8518, 0.0713, 0.0713}, {0.0, 0.0, 0.0, 0.0}},
          {1.950, {0.8492, 0.8492, 0.071, 0.071}, {0.0, 0.0, 0.0, 0.0}},
          {2.000, {0.8475, 0.8475, 0.0708, 0.0708}, {0.0, 0.0, 0.0, 0.0}},
          {2.050, {0.8483, 0.8483, 0.0707, 0.0707}, {0.0, 0.0, 0.0, 0.0}},
          {2.100, {0.85, 0.85, 0.0707, 0.0707}, {0.0, 0.0, 0.0, 0.0}},
          {2.150, {0.8402, 0.8402, 0.0699, 0.0699}, {0.0, 0.0, 0.0, 0.0}},
          {2.200, {0.8298, 0.8298, 0.069, 0.069}, {0.0, 0.0, 0.0, 0.0}},
          {2.250, {0.8271, 0.8271, 0.0687, 0.0687}, {0.0, 0.0, 0.0, 0.0}},
          {2.300, {0.8297, 0.8297, 0.0688, 0.0688}, {0.0, 0.0, 0.0, 0.0}},
          {2.350, {0.8334, 0.8334, 0.069, 0.069}, {0.0, 0.0, 0.0, 0.0}},
          {2.400, {0.823, 0.823, 0.0681, 0.0681}, {0.0, 0.0, 0.0, 0.0}},
          {2.450, {0.8218, 0.8218, 0.0679, 0.0679}, {0.0, 0.0, 0.0, 0.0}},
          {2.500, {0.8176, 0.8176, 0.0675, 0.0675}, {0.0, 0.0, 0.0, 0.0}},
        });

        std::shared_ptr<CSpectralSample> aSample1 =
          std::make_shared<CSpectralSample>(aMeasurements1, aSolarRadiation);
        std::shared_ptr<CSingleAngularMeasurement> aAngular1 =
          std::make_shared<CSingleAngularMeasurement>(aSample1, 10.0);

        return aAngular1;
    }

    static std::shared_ptr<CSingleAngularMeasurement> getSample3()
    {
        auto aSolarRadiation = StandardData::solarRadiationASTM_E891_87_Table1();

        std::shared_ptr<CSpectralSampleData> aMeasurements4 = CSpectralSampleData::create({
          {0.300, {0, 0, 0.0986, 0.0986}, {0.0, 0.0, 0.0, 0.0}},
          {0.305, {0, 0, 0.0984, 0.0984}, {0.0, 0.0, 0.0, 0.0}},
          {0.310, {0.0023, 0.0023, 0.098, 0.098}, {0.0, 0.0, 0.0, 0.0}},
          {0.315, {0.0161, 0.0161, 0.0978, 0.0978}, {0.0, 0.0, 0.0, 0.0}},
          {0.320, {0.0553, 0.0553, 0.0979, 0.0979}, {0.0, 0.0, 0.0, 0.0}},
          {0.325, {0.1392, 0.1392, 0.0996, 0.0996}, {0.0, 0.0, 0.0, 0.0}},
          {0.330, {0.2575, 0.2575, 0.1049, 0.1049}, {0.0, 0.0, 0.0, 0.0}},
          {0.335, {0.3836, 0.3836, 0.1143, 0.1143}, {0.0, 0.0, 0.0, 0.0}},
          {0.340, {0.5002, 0.5002, 0.1261, 0.1261}, {0.0, 0.0, 0.0, 0.0}},
          {0.345, {0.5999, 0.5999, 0.1387, 0.1387}, {0.0, 0.0, 0.0, 0.0}},
          {0.350, {0.6682, 0.6682, 0.1485, 0.1485}, {0.0, 0.0, 0.0, 0.0}},
          {0.355, {0.7145, 0.7145, 0.1556, 0.1556}, {0.0, 0.0, 0.0, 0.0}},
          {0.360, {0.7478, 0.7478, 0.1609, 0.1609}, {0.0, 0.0, 0.0, 0.0}},
          {0.365, {0.7686, 0.7686, 0.1643, 0.1643}, {0.0, 0.0, 0.0, 0.0}},
          {0.370, {0.775, 0.775, 0.1651, 0.1651}, {0.0, 0.0, 0.0, 0.0}},
          {0.375, {0.7743, 0.7743, 0.1647, 0.1647}, {0.0, 0.0, 0.0, 0.0}},
          {0.380, {0.7614, 0.7614, 0.1622, 0.1622}, {0.0, 0.0, 0.0, 0.0}},
          {0.385, {0.7769, 0.7769, 0.1646, 0.1646}, {0.0, 0.0, 0.0, 0.0}},
          {0.390, {0.7887, 0.7887, 0.1665, 0.1665}, {0.0, 0.0, 0.0, 0.0}},
          {0.395, {0.7975, 0.7975, 0.1678, 0.1678}, {0.0, 0.0, 0.0, 0.0}},
          {0.400, {0.8019, 0.8019, 0.1684, 0.1684}, {0.0, 0.0, 0.0, 0.0}},
          {0.410, {0.8042, 0.8042, 0.1684, 0.1684}, {0.0, 0.0, 0.0, 0.0}},
          {0.420, {0.8015, 0.8015, 0.1675, 0.1675}, {0.0, 0.0, 0.0, 0.0}},
          {0.430, {0.8008, 0.8008, 0.167, 0.167}, {0.0, 0.0, 0.0, 0.0}},
          {0.440, {0.7988, 0.7988, 0.1663, 0.1663}, {0.0, 0.0, 0.0, 0.0}},
          {0.450, {0.8028, 0.8028, 0.1668, 0.1668}, {0.0, 0.0, 0.0, 0.0}},
          {0.460, {0.8073, 0.8073, 0.1673, 0.1673}, {0.0, 0.0, 0.0, 0.0}},
          {0.470, {0.8093, 0.8093, 0.1674, 0.1674}, {0.0, 0.0, 0.0, 0.0}},
          {0.480, {0.8117, 0.8117, 0.1675, 0.1675}, {0.0, 0.0, 0.0, 0.0}},
          {0.490, {0.8132, 0.8132, 0.1675, 0.1675}, {0.0, 0.0, 0.0, 0.0}},
          {0.500, {0.8132, 0.8132, 0.1673, 0.1673}, {0.0, 0.0, 0.0, 0.0}},
          {0.510, {0.8138, 0.8138, 0.1672, 0.1672}, {0.0, 0.0, 0.0, 0.0}},
          {0.520, {0.8131, 0.8131, 0.1668, 0.1668}, {0.0, 0.0, 0.0, 0.0}},
          {0.530, {0.8135, 0.8135, 0.1667, 0.1667}, {0.0, 0.0, 0.0, 0.0}},
          {0.540, {0.814, 0.814, 0.1666, 0.1666}, {0.0, 0.0, 0.0, 0.0}},
          {0.550, {0.8117, 0.8117, 0.1661, 0.1661}, {0.0, 0.0, 0.0, 0.0}},
          {0.560, {0.8102, 0.8102, 0.1656, 0.1656}, {0.0, 0.0, 0.0, 0.0}},
          {0.570, {0.8088, 0.8088, 0.1652, 0.1652}, {0.0, 0.0, 0.0, 0.0}},
          {0.580, {0.8076, 0.8076, 0.1648, 0.1648}, {0.0, 0.0, 0.0, 0.0}},
          {0.590, {0.8035, 0.8035, 0.164, 0.164}, {0.0, 0.0, 0.0, 0.0}},
          {0.600, {0.8013, 0.8013, 0.1634, 0.1634}, {0.0, 0.0, 0.0, 0.0}},
          {0.610, {0.8003, 0.8003, 0.1632, 0.1632}, {0.0, 0.0, 0.0, 0.0}},
          {0.620, {0.794, 0.794, 0.1619, 0.1619}, {0.0, 0.0, 0.0, 0.0}},
          {0.630, {0.7923, 0.7923, 0.1615, 0.1615}, {0.0, 0.0, 0.0, 0.0}},
          {0.640, {0.7888, 0.7888, 0.1608, 0.1608}, {0.0, 0.0, 0.0, 0.0}},
          {0.650, {0.7848, 0.7848, 0.16, 0.16}, {0.0, 0.0, 0.0, 0.0}},
          {0.660, {0.781, 0.781, 0.1593, 0.1593}, {0.0, 0.0, 0.0, 0.0}},
          {0.670, {0.7806, 0.7806, 0.1591, 0.1591}, {0.0, 0.0, 0.0, 0.0}},
          {0.680, {0.7733, 0.7733, 0.1578, 0.1578}, {0.0, 0.0, 0.0, 0.0}},
          {0.690, {0.7702, 0.7702, 0.1571, 0.1571}, {0.0, 0.0, 0.0, 0.0}},
          {0.700, {0.7669, 0.7669, 0.1565, 0.1565}, {0.0, 0.0, 0.0, 0.0}},
          {0.710, {0.7614, 0.7614, 0.1555, 0.1555}, {0.0, 0.0, 0.0, 0.0}},
          {0.720, {0.7586, 0.7586, 0.155, 0.155}, {0.0, 0.0, 0.0, 0.0}},
          {0.730, {0.7537, 0.7537, 0.1541, 0.1541}, {0.0, 0.0, 0.0, 0.0}},
          {0.740, {0.7462, 0.7462, 0.1528, 0.1528}, {0.0, 0.0, 0.0, 0.0}},
          {0.750, {0.7449, 0.7449, 0.1525, 0.1525}, {0.0, 0.0, 0.0, 0.0}},
          {0.760, {0.7396, 0.7396, 0.1515, 0.1515}, {0.0, 0.0, 0.0, 0.0}},
          {0.770, {0.7378, 0.7378, 0.1512, 0.1512}, {0.0, 0.0, 0.0, 0.0}},
          {0.780, {0.7359, 0.7359, 0.1508, 0.1508}, {0.0, 0.0, 0.0, 0.0}},
          {0.790, {0.7259, 0.7259, 0.1491, 0.1491}, {0.0, 0.0, 0.0, 0.0}},
          {0.800, {0.7275, 0.7275, 0.1493, 0.1493}, {0.0, 0.0, 0.0, 0.0}},
          {0.850, {0.709, 0.709, 0.1461, 0.1461}, {0.0, 0.0, 0.0, 0.0}},
          {0.900, {0.7009, 0.7009, 0.1445, 0.1445}, {0.0, 0.0, 0.0, 0.0}},
          {0.950, {0.6907, 0.6907, 0.1428, 0.1428}, {0.0, 0.0, 0.0, 0.0}},
          {1.000, {0.6858, 0.6858, 0.1418, 0.1418}, {0.0, 0.0, 0.0, 0.0}},
          {1.050, {0.6844, 0.6844, 0.1415, 0.1415}, {0.0, 0.0, 0.0, 0.0}},
          {1.100, {0.6843, 0.6843, 0.1413, 0.1413}, {0.0, 0.0, 0.0, 0.0}},
          {1.150, {0.686, 0.686, 0.1414, 0.1414}, {0.0, 0.0, 0.0, 0.0}},
          {1.200, {0.6892, 0.6892, 0.1418, 0.1418}, {0.0, 0.0, 0.0, 0.0}},
          {1.250, {0.6946, 0.6946, 0.1424, 0.1424}, {0.0, 0.0, 0.0, 0.0}},
          {1.300, {0.7021, 0.7021, 0.1434, 0.1434}, {0.0, 0.0, 0.0, 0.0}},
          {1.350, {0.7101, 0.7101, 0.1445, 0.1445}, {0.0, 0.0, 0.0, 0.0}},
          {1.400, {0.7188, 0.7188, 0.1457, 0.1457}, {0.0, 0.0, 0.0, 0.0}},
          {1.450, {0.729, 0.729, 0.1471, 0.1471}, {0.0, 0.0, 0.0, 0.0}},
          {1.500, {0.7404, 0.7404, 0.1488, 0.1488}, {0.0, 0.0, 0.0, 0.0}},
          {1.550, {0.7489, 0.7489, 0.15, 0.15}, {0.0, 0.0, 0.0, 0.0}},
          {1.600, {0.7557, 0.7557, 0.1509, 0.1509}, {0.0, 0.0, 0.0, 0.0}},
          {1.650, {0.7583, 0.7583, 0.1512, 0.1512}, {0.0, 0.0, 0.0, 0.0}},
          {1.700, {0.758, 0.758, 0.151, 0.151}, {0.0, 0.0, 0.0, 0.0}},
          {1.750, {0.7585, 0.7585, 0.1509, 0.1509}, {0.0, 0.0, 0.0, 0.0}},
          {1.800, {0.7554, 0.7554, 0.1503, 0.1503}, {0.0, 0.0, 0.0, 0.0}},
          {1.850, {0.7537, 0.7537, 0.1498, 0.1498}, {0.0, 0.0, 0.0, 0.0}},
          {1.900, {0.7575, 0.7575, 0.1503, 0.1503}, {0.0, 0.0, 0.0, 0.0}},
          {1.950, {0.7546, 0.7546, 0.1497, 0.1497}, {0.0, 0.0, 0.0, 0.0}},
          {2.000, {0.7528, 0.7528, 0.1492, 0.1492}, {0.0, 0.0, 0.0, 0.0}},
          {2.050, {0.7536, 0.7536, 0.1492, 0.1492}, {0.0, 0.0, 0.0, 0.0}},
          {2.100, {0.7555, 0.7555, 0.1494, 0.1494}, {0.0, 0.0, 0.0, 0.0}},
          {2.150, {0.7449, 0.7449, 0.1475, 0.1475}, {0.0, 0.0, 0.0, 0.0}},
          {2.200, {0.7335, 0.7335, 0.1456, 0.1456}, {0.0, 0.0, 0.0, 0.0}},
          {2.250, {0.7305, 0.7305, 0.145, 0.145}, {0.0, 0.0, 0.0, 0.0}},
          {2.300, {0.7334, 0.7334, 0.1453, 0.1453}, {0.0, 0.0, 0.0, 0.0}},
          {2.350, {0.7374, 0.7374, 0.1458, 0.1458}, {0.0, 0.0, 0.0, 0.0}},
          {2.400, {0.7261, 0.7261, 0.1439, 0.1439}, {0.0, 0.0, 0.0, 0.0}},
          {2.450, {0.7248, 0.7248, 0.1436, 0.1436}, {0.0, 0.0, 0.0, 0.0}},
          {2.500, {0.7203, 0.7203, 0.1427, 0.1427}, {0.0, 0.0, 0.0, 0.0}},
        });

        std::shared_ptr<CSpectralSample> aSample4 =
          std::make_shared<CSpectralSample>(aMeasurements4, aSolarRadiation);
        std::shared_ptr<CSingleAngularMeasurement> aAngular4 =
          std::make_shared<CSingleAngularMeasurement>(aSample4, 40.0);

        return aAngular4;
    }

    static std::shared_ptr<CSingleAngularMeasurement> getSample4()
    {
        auto aSolarRadiation = StandardData::solarRadiationASTM_E891_87_Table1();

        std::shared_ptr<CSpectralSampleData> aMeasurements9 = CSpectralSampleData::create({
          {0.300, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.305, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.310, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.315, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.320, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.325, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.330, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.335, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.340, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.345, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.350, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.355, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.360, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.365, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.370, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.375, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.380, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.385, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.390, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.395, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.400, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.410, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.420, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.430, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.440, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.450, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.460, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.470, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.480, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.490, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.500, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.510, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.520, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.530, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.540, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.550, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.560, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.570, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.580, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.590, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.600, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.610, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.620, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.630, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.640, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.650, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.660, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.670, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.680, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.690, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.700, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.710, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.720, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.730, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.740, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.750, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.760, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.770, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.780, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.790, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.800, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.850, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {0.900, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {0.950, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {1.000, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {1.050, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {1.100, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {1.150, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {1.200, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {1.250, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {1.300, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {1.350, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {1.400, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {1.450, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {1.500, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {1.550, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {1.600, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {1.650, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {1.700, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {1.750, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {1.800, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {1.850, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {1.900, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {1.950, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {2.000, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {2.050, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {2.100, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {2.150, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {2.200, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {2.250, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {2.300, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {2.350, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {2.400, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}}, {2.450, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
          {2.500, {0, 0, 1, 1}, {0.0, 0.0, 0.0, 0.0}},
        });

        std::shared_ptr<CSpectralSample> aSample9 =
          std::make_shared<CSpectralSample>(aMeasurements9, aSolarRadiation);
        std::shared_ptr<CSingleAngularMeasurement> aAngular9 =
          std::make_shared<CSingleAngularMeasurement>(aSample9, 90.0);

        return aAngular9;
    }


protected:
    void SetUp() override
    {
        constexpr double thickness = 3.048e-3;   // [m]
        const auto aMaterial_102 = SingleLayerOptics::Material::nBandMaterial(
          loadGlassSample(), thickness, MaterialType::Monolithic);

        auto aCell_102 = SpecularLayer::createLayer(aMaterial_102);

        std::shared_ptr<CSingleAngularMeasurement> aAngular0 = getSample1();
        std::shared_ptr<CSingleAngularMeasurement> aAngular1 = getSample2();
        std::shared_ptr<CSingleAngularMeasurement> aAngular4 = getSample3();
        std::shared_ptr<CSingleAngularMeasurement> aAngular9 = getSample4();
        // To assure interpolation to common wavelengths. MultiBSDF will NOT work with different
        // wavelengths
        CCommonWavelengths aCommonWL;
        aCommonWL.addWavelength(aCell_102->getBandWavelengths());
        std::vector<double> wl0 = aAngular0->getWavelengthsFromSample();
        std::vector<double> wl10 = aAngular1->getWavelengthsFromSample();
        std::vector<double> wl40 = aAngular4->getWavelengthsFromSample();
        std::vector<double> wl90 = aAngular9->getWavelengthsFromSample();
        aCommonWL.addWavelength(wl0);
        aCommonWL.addWavelength(wl10);
        aCommonWL.addWavelength(wl40);
        aCommonWL.addWavelength(wl90);
        std::vector<double> commonWavelengths =
          aCommonWL.getCombinedWavelengths(Combine::Interpolate);

        std::shared_ptr<CAngularMeasurements> m_Measurements =
          std::make_shared<CAngularMeasurements>(aAngular0, commonWavelengths);
        m_Measurements->addMeasurement(aAngular1);
        m_Measurements->addMeasurement(aAngular4);
        m_Measurements->addMeasurement(aAngular9);

        const auto aMaterial_103 = std::make_shared<CMaterialMeasured>(m_Measurements);
        auto angularLayer = SingleLayerOptics::SpecularLayer::createLayer(aMaterial_103);

        // Finds combination of two wavelength sets without going outside of wavelenght range for
        // any of spectral samples.

        m_Layer = CMultiPaneSpecular::create({aCell_102, angularLayer});

        const CalculationProperties input{StandardData::solarRadiationASTM_E891_87_Table1(),
                                          commonWavelengths};
        m_Layer->setCalculationProperties(input);
    }

public:
    [[nodiscard]] std::shared_ptr<CMultiPaneSpecular> getLayer() const
    {
        return m_Layer;
    };
};

TEST_F(EquivalentSpecularAngularDualLayer_102_103, TestAngle0)
{
    SCOPED_TRACE("Begin Test: Specular and Angular MultiLayerOptics layer - angle = 0 deg.");

    constexpr double minLambda = 0.3;
    constexpr double maxLambda = 2.5;
    constexpr double angle = 0;

    CMultiPaneSpecular aLayer = *getLayer();

    double T = aLayer.getProperty(Side::Front, Property::T, angle, minLambda, maxLambda);
    EXPECT_NEAR(0.719531, T, 1e-6);

    double Rf = aLayer.getProperty(Side::Front, Property::R, angle, minLambda, maxLambda);
    EXPECT_NEAR(0.128320, Rf, 1e-6);

    double Rb = aLayer.getProperty(Side::Back, Property::R, angle, minLambda, maxLambda);
    EXPECT_NEAR(0.128320, Rb, 1e-6);

    double Abs1 = aLayer.Abs(1, angle, minLambda, maxLambda, Side::Front);
    EXPECT_NEAR(0.086269, Abs1, 1e-6);

    double Abs2 = aLayer.Abs(2, angle, minLambda, maxLambda, Side::Front);
    EXPECT_NEAR(0.065880, Abs2, 1e-6);
}

TEST_F(EquivalentSpecularAngularDualLayer_102_103, TestAngle10)
{
    SCOPED_TRACE("Begin Test: Specular and Angular MultiLayerOptics layer - angle = 10 deg.");

    constexpr double minLambda = 0.3;
    constexpr double maxLambda = 2.5;
    constexpr double angle = 10;

    CMultiPaneSpecular aLayer = *getLayer();

    double T = aLayer.getProperty(Side::Front, Property::T, angle, minLambda, maxLambda);
    EXPECT_NEAR(0.718730, T, 1e-6);

    double Rf = aLayer.getProperty(Side::Front, Property::R, angle, minLambda, maxLambda);
    EXPECT_NEAR(0.128243, Rf, 1e-6);

    double Rb = aLayer.getProperty(Side::Back, Property::R, angle, minLambda, maxLambda);
    EXPECT_NEAR(0.128242, Rb, 1e-6);

    double Abs1 = aLayer.Abs(1, angle, minLambda, maxLambda, Side::Front);
    EXPECT_NEAR(0.086795, Abs1, 1e-6);

    double Abs2 = aLayer.Abs(2, angle, minLambda, maxLambda, Side::Front);
    EXPECT_NEAR(0.066233, Abs2, 1e-6);
}

TEST_F(EquivalentSpecularAngularDualLayer_102_103, TestAngle25)
{
    SCOPED_TRACE("Begin Test: Specular and Angular MultiLayerOptics layer - angle = 25 deg.");

    constexpr double minLambda = 0.3;
    constexpr double maxLambda = 2.5;
    constexpr double angle = 25;

    CMultiPaneSpecular aLayer = *getLayer();

    double T = aLayer.getProperty(Side::Front, Property::T, angle, minLambda, maxLambda);
    EXPECT_NEAR(0.678197, T, 1e-6);

    double Rf = aLayer.getProperty(Side::Front, Property::R, angle, minLambda, maxLambda);
    EXPECT_NEAR(0.157390, Rf, 1e-6);

    double Rb = aLayer.getProperty(Side::Back, Property::R, angle, minLambda, maxLambda);
    EXPECT_NEAR(0.162799, Rb, 1e-6);

    double Abs1 = aLayer.Abs(1, angle, minLambda, maxLambda, Side::Front);
    EXPECT_NEAR(0.092161, Abs1, 1e-6);

    double Abs2 = aLayer.Abs(2, angle, minLambda, maxLambda, Side::Front);
    EXPECT_NEAR(0.072252, Abs2, 1e-6);
}

TEST_F(EquivalentSpecularAngularDualLayer_102_103, TestAngle90)
{
    SCOPED_TRACE("Begin Test: Specular and Angular MultiLayerOptics layer - angle = 90 deg.");

    constexpr double minLambda = 0.3;
    constexpr double maxLambda = 2.5;
    constexpr double angle = 90;

    CMultiPaneSpecular aLayer = *getLayer();

    double T = aLayer.getProperty(Side::Front, Property::T, angle, minLambda, maxLambda);
    EXPECT_NEAR(0.0, T, 1e-6);

    double Rf = aLayer.getProperty(Side::Front, Property::R, angle, minLambda, maxLambda);
    EXPECT_NEAR(1.0, Rf, 1e-6);

    double Rb = aLayer.getProperty(Side::Back, Property::R, angle, minLambda, maxLambda);
    EXPECT_NEAR(1.0, Rb, 1e-6);

    double Abs1 = aLayer.Abs(1, angle, minLambda, maxLambda, Side::Front);
    EXPECT_NEAR(3.33066907387547E-16, Abs1, 1e-6);

    double Abs2 = aLayer.Abs(2, angle, minLambda, maxLambda, Side::Front);
    EXPECT_NEAR(0.0, Abs2, 1e-6);
}

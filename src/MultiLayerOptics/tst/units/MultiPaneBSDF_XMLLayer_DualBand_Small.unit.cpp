#include <memory>
#include <gtest/gtest.h>

#include "WCESpectralAveraging.hpp"
#include "WCEMultiLayerOptics.hpp"
#include "WCESingleLayerOptics.hpp"
#include "WCECommon.hpp"

// Example of predefined XML layer

using MultiLayerOptics::CMultiPaneBSDF;
using FenestrationCommon::CSeries;
using SpectralAveraging::CSpectralSampleData;

class MultiPaneBSDF_XMLLayer_DualBand_SmallBasis : public testing::Test
{
private:
    std::unique_ptr<CMultiPaneBSDF> m_Layer;

    CSeries loadSolarRadiationFile()
    {
        // Full ASTM E891-87 Table 1 (Solar radiation)
        CSeries aSolarRadiation(
          {{0.3000, 0.0},    {0.3050, 3.4},    {0.3100, 15.6},   {0.3150, 41.1},   {0.3200, 71.2},
           {0.3250, 100.2},  {0.3300, 152.4},  {0.3350, 155.6},  {0.3400, 179.4},  {0.3450, 186.7},
           {0.3500, 212.0},  {0.3600, 240.5},  {0.3700, 324.0},  {0.3800, 362.4},  {0.3900, 381.7},
           {0.4000, 556.0},  {0.4100, 656.3},  {0.4200, 690.8},  {0.4300, 641.9},  {0.4400, 798.5},
           {0.4500, 956.6},  {0.4600, 990.0},  {0.4700, 998.0},  {0.4800, 1046.1}, {0.4900, 1005.1},
           {0.5000, 1026.7}, {0.5100, 1066.7}, {0.5200, 1011.5}, {0.5300, 1084.9}, {0.5400, 1082.4},
           {0.5500, 1102.2}, {0.5700, 1087.4}, {0.5900, 1024.3}, {0.6100, 1088.8}, {0.6300, 1062.1},
           {0.6500, 1061.7}, {0.6700, 1046.2}, {0.6900, 859.2},  {0.7100, 1002.4}, {0.7180, 816.9},
           {0.7244, 842.8},  {0.7400, 971.0},  {0.7525, 956.3},  {0.7575, 942.2},  {0.7625, 524.8},
           {0.7675, 830.7},  {0.7800, 908.9},  {0.8000, 873.4},  {0.8160, 712.0},  {0.8237, 660.2},
           {0.8315, 765.5},  {0.8400, 799.8},  {0.8600, 815.2},  {0.8800, 778.3},  {0.9050, 630.4},
           {0.9150, 565.2},  {0.9250, 586.4},  {0.9300, 348.1},  {0.9370, 224.2},  {0.9480, 271.4},
           {0.9650, 451.2},  {0.9800, 549.7},  {0.9935, 630.1},  {1.0400, 582.9},  {1.0700, 539.7},
           {1.1000, 366.2},  {1.1200, 98.1},   {1.1300, 169.5},  {1.1370, 118.7},  {1.1610, 301.9},
           {1.1800, 406.8},  {1.2000, 375.2},  {1.2350, 423.6},  {1.2900, 365.7},  {1.3200, 223.4},
           {1.3500, 30.1},   {1.3950, 1.4},    {1.4425, 51.6},   {1.4625, 97.0},   {1.4770, 97.3},
           {1.4970, 167.1},  {1.5200, 239.3},  {1.5390, 248.8},  {1.5580, 249.3},  {1.5780, 222.3},
           {1.5920, 227.3},  {1.6100, 210.5},  {1.6300, 224.7},  {1.6460, 215.9},  {1.6780, 202.8},
           {1.7400, 158.2},  {1.8000, 28.6},   {1.8600, 1.8},    {1.9200, 1.1},    {1.9600, 19.7},
           {1.9850, 84.9},   {2.0050, 25.0},   {2.0350, 92.5},   {2.0650, 56.3},   {2.1000, 82.7},
           {2.1480, 76.2},   {2.1980, 66.4},   {2.2700, 65.0},   {2.3600, 57.6},   {2.4500, 19.8},
           {2.4940, 17.0},   {2.5370, 3.0},    {2.9410, 4.0},    {2.9730, 7.0},    {3.0050, 6.0},
           {3.0560, 3.0},    {3.1320, 5.0},    {3.1560, 18.0},   {3.2040, 1.2},    {3.2450, 3.0},
           {3.3170, 12.0},   {3.3440, 3.0},    {3.4500, 12.2},   {3.5730, 11.0},   {3.7650, 9.0},
           {4.0450, 6.9}

          });

        return aSolarRadiation;
    }

    // clang-format off

    static std::vector<std::vector<double>> TransmittanceFrontSolar(){
        return {
            {10.252821201394584,0.006095731055623178,0.0028763605222179344,0.0037395445625015163,0.0019385552311439438,0.006952343836881971,0.002939880436034285},
            {0.007998908143137933,10.98786727473673,0.008763697586615075,0.00016176938087921725,0.0,0.0,0.0},
            {0.0033431206857027274,0.007840405677402662,11.5659518370803,0.005591685982013421,0.00041789001561428534,0.0010108023669995166,0.0005735564760465436},
            {0.0037610104209227905,0.0,0.004318145328942108,11.764375612481514,0.005087785319081855,0.0,0.0},
            {0.0028763605222179344,0.008763697586615075,0.004318145328942108,0.005591685982013421,10.252821201394584,0.006095731055623178,0.002939880436034285},
            {0.0037395445625015163,0.00016176938087921725,0.005591685982013421,0.005087785319081855,0.006952343836881971,10.98786727473673,0.008763697586615075},
            {0.0019385552311439438,0.0,0.00041789001561428534,0.0,0.002939880436034285,0.008763697586615075,11.5659518370803}
        };
    }

    static std::vector<std::vector<double>> TransmittanceBackSolar(){
        return {
            {8.218987917288283,0.006095731055623178,0.002876647897735084,0.004257084969637862,0.005600558761555169,0.0036700273537564926,0.0024074572263188027},
            {0.008591820043088465,8.085499669145982,0.011118825305165761,0.0,0.0,0.0,0.0},
            {0.0038785842957975362,0.008222728716358286,7.691345304849404,0.014728183200077622,0.0011471128581610225,0.0,0.0004718131893063949},
            {0.008603347140698152,0.0005054011834997583,0.01507418967048021,7.854722606396791,0.008246049194960789,0.0,0.0},
            {0.002089759913687144,0.00041789001561428534,0.0,0.013581063798917417,7.7455244784665345,0.01219778358368231,0.0},
            {0.0038785842957975362,0.008222728716358286,0.004257084969637862,0.014728183200077622,0.0011471128581610225,8.218987917288283,0.006095731055623178},
            {0.008603347140698152,0.0005054011834997583,0.011118825305165761,0.013581063798917417,0.008246049194960789,8.085499669145982,0.011118825305165761}
        };
    }


    static std::vector<std::vector<double>> ReflectanceFrontSolar(){
        return {
            {0.0032759222071488308,0.004258370956704377,0.003627260840400187,0.0031955976251153394,0.003671337612337933,0.003657318406128673,0.004324667916842566},
            {0.003857934754419338,0.0034409211600160542,0.003283284930171658,0.0034032988937074313,0.0036684513487983406,0.003973933753085019,0.004135505315840356},
            {0.004463321211066796,0.0050195042718292945,0.003967027643388085,0.005121668248040975,0.004418941906649562,0.005017024093804324,0.004986566271399558},
            {0.004728122339206935,0.005247371781870946,0.004153061828551606,0.005252699643618289,0.0037366375246657628,0.0049288299255493394,0.005118012278903635},
            {0.0052811733053774535,0.004567490559746998,0.004475608085890979,0.005120193745953662,0.004289244157121953,0.004887988165769626,0.004749654274193069},
            {0.003808548920033594,0.004439600890303198,0.0033402452429523396,0.003638814990336992,0.002985315226422875,0.003937926557497236,0.003871391812471442},
            {0.003857934754419338,0.0034409211600160542,0.003283284930171658,0.0034032988937074313,0.0036684513487983406,0.003973933753085019,0.004135505315840356}
        };
    }


    static std::vector<std::vector<double>> ReflectanceBackSolar(){
        return {
            {0.004369689541395494,0.00449295007563265,0.0055488198521669975,0.0056674381014755176,0.004854283903433088,0.00494609639769443,0.004599829288381644},
            {0.004566194675789189,0.00513834646790979,0.005164843721923603,0.005052967829169727,0.005906478028261318,0.004075185599881477,0.003939251791720272},
            {0.004074766410519037,0.004241676588140145,0.004573678769106546,0.004443751187444717,0.0042531110645283275,0.003715157925261233,0.003924584461076304},
            {0.00452788338273823,0.004330377989543395,0.004706646006395094,0.004324838801680508,0.004335328349539308,0.003878589994810106,0.003603005844198325},
            {0.0037229025048111696,0.004327837617888737,0.00407239558624079,0.004283518415973068,0.004452412473845554,0.004221751403176302,0.0033328119921173537},
            {0.0052295993656084686,0.005023655417163336,0.0051200142936513445,0.003843414448485869,0.0047705000915269245,0.005184818634802781,0.004128655376116017},
            {0.006213401841107214,0.005473187731505794,0.005327278898883835,0.006226626543477097,0.005890893717382083,0.005821106027854471,0.004212846545324349}
        };
    }

    static std::vector<std::vector<double>> TransmittanceFrontVisible() {
        return {
            {2.564297908737565,0.0014832835044840905,0.0007879055774177128,0.0014538712231894875,0.0005174277904288296,0.0019318720886949483,0.0013685141194347383},
            {0.0021478757994042973,2.7477193266784635,0.0020391567951015123,0.0,0.0,0.0,0.0},
            {0.0005223463968500705,0.0021938542586653265,2.8902489672999847,0.0011890071207650065,0.0,0.0,0.00014339276413652665},
            {0.0014625695606874194,0.0001044692443207363,0.0011342762942973953,2.9415747792117397,0.0011890071207650065,0.0,0.0},
            {0.0007312846979779068,0.0001044692443207363,0.000013481087846960857,0.0016616147370019263,2.884597271255372,0.0023779234866825515,0.0},
            {0.0018951845262059057,0.0,0.000013481087846960857,0.0001044692443207363,0.0017481149754134929,2.7502355143314417,0.003916714734575068},
            {0.000843309457281829,0.0,0.0,0.0,0.00012634563659919575,0.003032295255598668,2.608036037906759}
        };
    }

    static std::vector<std::vector<double>> TransmittanceBackVisible() {
        return {
            {2.0556639899342,0.0012894339647013497,0.000883812963056654,0.0018725506071600997,0.000969402159921066,0.0015035800060325495,0.000815991141091111},
            {0.0018733081689767243,2.0224022116186975,0.003158640892197863,0.0,0.0,0.0,0.0},
            {0.001239393612031828,0.0018029330973648468,1.9220957349725202,0.003814682781982991,0.0,0.0,0.0},
            {0.002007498650594848,0.0001044692443207363,0.0025565752634934585,1.9632327218289647,0.002104779207426276,0.0,0.000013481087846960857},
            {0.00014339276413652665,0.0,0.0,0.002513339525882587,1.936078994842032,0.0028136981673763823,0.0},
            {0.0014942712591791367,0.0,0.0,0.0,0.00328498652879706,2.106667685295958,0.0019023230126146267},
            {0.000843309457281829,0.0,0.0,0.0,0.00012634563659919575,0.003032295255598668,2.608036037906759}
        };
    }

    static std::vector<std::vector<double>> ReflectanceFrontVisible() {
        return {
            {0.0010483378919866655,0.0010853335030998335,0.0008367178783294762,0.0008639059211180637,0.0009739495781507917,0.0009836541746383381,0.0011678998167549008},
            {0.0007741015967191158,0.0011540671967156815,0.0011305326809359993,0.0009505640799762645,0.0009503755148617219,0.0013190537034872733,0.0011344112112348795},
            {0.001224179772018897,0.0010501005239892627,0.0010863607543331647,0.000741396414622067,0.0012882172560017235,0.0014151973774096137,0.001373746256143531},
            {0.0012406659008158245,0.0013178251334199355,0.001161236992644258,0.0010129412796698921,0.0010153050029644577,0.0015660602414393373,0.0015264920374750135},
            {0.001139816276026425,0.0012304431708416375,0.0012109321964903245,0.001458406384688774,0.0011066297516826196,0.0010620617910227203,0.0014780775342396153},
            {0.0010016196619562125,0.001169575801154877,0.0010250837742515857,0.0009546665979422921,0.0009261214374088871,0.0010535889786083035,0.0009663930348145159},
            {0.0010483378919866655,0.0010853335030998335,0.0008367178783294762,0.0008639059211180637,0.0009739495781507917,0.0009836541746383381,0.0011678998167549008}
        };
    }

    static std::vector<std::vector<double>> ReflectanceBackVisible() {
        return {
            {0.0012078978458068908,0.0013004719108779851,0.0013160826394076605,0.0012246666758185128,0.0012830571639553027,0.0011579399319921023,0.0011363911792870408},
            {0.001342691544537898,0.0014133043659158493,0.0014529754990942765,0.001310156794811524,0.0013583491084077265,0.0012660511341257545,0.0011055849554935503},
            {0.00106463440801295,0.0010356104515628205,0.0010350090059558401,0.0011797779449357508,0.001266835794575022,0.0009205829505315551,0.0010391617600517327},
            {0.0011102258075844941,0.0010796281385613218,0.0010712496087041765,0.001138245952718545,0.0009170822286652859,0.0010338019088285443,0.0008752701699364593},
            {0.0009619028718360643,0.001028913258343582,0.001155245295822993,0.0011829933656807605,0.0013284422606499146,0.001067590113609491,0.0008384992943970994},
            {0.0012078978458068908,0.0013004719108779851,0.0013160826394076605,0.0012246666758185128,0.0012830571639553027,0.0011579399319921023,0.0011363911792870408},
            {0.001342691544537898,0.0014133043659158493,0.0014529754990942765,0.001310156794811524,0.0013583491084077265,0.0012660511341257545,0.0011055849554935503}
        };
    }

    // clang-format on

protected:
    void SetUp() override
    {
        using FenestrationCommon::MaterialType;
        using FenestrationCommon::WavelengthRange;
        using SingleLayerOptics::BSDFHemisphere;

        const auto aBSDF = BSDFHemisphere::create(SingleLayerOptics::BSDFBasis::Small);
        auto tfSolar = TransmittanceFrontSolar();
        auto tbSolar = TransmittanceBackSolar();
        auto rfSolar = ReflectanceFrontSolar();
        auto rbSolar = ReflectanceBackSolar();
        auto tfVisible = TransmittanceFrontVisible();
        auto tbVisible = TransmittanceBackVisible();
        auto rfVisible = ReflectanceFrontVisible();
        auto rbVisible = ReflectanceBackVisible();

        auto nirRatio{0.499};
        const auto aBSDFMaterial = SingleLayerOptics::Material::dualBandBSDFMaterial(tfSolar,
                                                                                     tbSolar,
                                                                                     rfSolar,
                                                                                     rbSolar,
                                                                                     tfVisible,
                                                                                     tbVisible,
                                                                                     rfVisible,
                                                                                     rbVisible,
                                                                                     aBSDF,
                                                                                     nirRatio);

        auto Layer_BSDF =
          SingleLayerOptics::CBSDFLayerMaker::getPreLoadedBSDFLayer(aBSDFMaterial, aBSDF);

        m_Layer = CMultiPaneBSDF::create({Layer_BSDF});

        constexpr auto numOfVisibleBands{5U};
        constexpr auto numOfIRBands{10U};

        const auto condensedSpectrum{
          FenestrationCommon::generateSpectrum(numOfVisibleBands, numOfIRBands)};

        const SingleLayerOptics::CalculationProperties input{loadSolarRadiationFile(),
                                                             condensedSpectrum};
        m_Layer->setCalculationProperties(input);
    }

public:
    [[nodiscard]] CMultiPaneBSDF & getLayer() const
    {
        return *m_Layer;
    }
};


TEST_F(MultiPaneBSDF_XMLLayer_DualBand_SmallBasis, TestBSDFMatrixAsInput)
{
    using FenestrationCommon::Side;
    using FenestrationCommon::PropertySimple;
    using FenestrationCommon::ScatteringSimple;

    SCOPED_TRACE("Begin Test: Specular layer - BSDF.");

    const double minLambda = 0.3;
    const double maxLambda = 2.5;

    CMultiPaneBSDF & aLayer = getLayer();

    auto matrices = aLayer.getWavelengthMatrices(minLambda, maxLambda, Side::Front, PropertySimple::T);
    std::vector<double> values;
    for(const auto & mat : matrices)
    {
        values.push_back(mat.matrix(0,0));
    }

    double theta = 0;
    double phi = 0;

    double tauHem = aLayer.DirHem(minLambda, maxLambda, Side::Front, PropertySimple::T, theta, phi);
    EXPECT_NEAR(0.662790, tauHem, 1e-6);

    double rhoFrontHem =
      aLayer.DirHem(minLambda, maxLambda, Side::Front, PropertySimple::R, theta, phi);
    EXPECT_NEAR(0.081886, rhoFrontHem, 1e-6);

    double rhoBackHem =
      aLayer.DirHem(minLambda, maxLambda, Side::Back, PropertySimple::R, theta, phi);
    EXPECT_NEAR(0.054989, rhoBackHem, 1e-6);

    double abs1 = aLayer.Abs(minLambda, maxLambda, Side::Front, 1, theta, phi);
    EXPECT_NEAR(0.092253, abs1, 1e-6);

    double abs2 = aLayer.Abs(minLambda, maxLambda, Side::Front, 2, theta, phi);
    EXPECT_NEAR(0.163071, abs2, 1e-6);

    auto absHeatDirect = aLayer.getAbsorptanceLayersHeat(
      minLambda, maxLambda, Side::Front, ScatteringSimple::Direct, 0, 0);
    EXPECT_NEAR(0.092253, absHeatDirect[0], 1e-6);
    EXPECT_NEAR(0.163071, absHeatDirect[1], 1e-6);

    auto absHeatDiffuse = aLayer.getAbsorptanceLayersHeat(
      minLambda, maxLambda, Side::Front, ScatteringSimple::Diffuse, 0, 0);
    EXPECT_NEAR(0.102450, absHeatDiffuse[0], 1e-6);
    EXPECT_NEAR(0.156131, absHeatDiffuse[1], 1e-6);
}

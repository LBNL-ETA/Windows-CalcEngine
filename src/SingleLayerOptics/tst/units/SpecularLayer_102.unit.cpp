#include <memory>
#include <gtest/gtest.h>

#include <WCESpectralAveraging.hpp>
#include <WCESingleLayerOptics.hpp>
#include <WCECommon.hpp>

#include "optical/standardData.hpp"
#include "optical/spectralSampleData.hpp"

using namespace SingleLayerOptics;
using namespace FenestrationCommon;
using namespace SpectralAveraging;

class TestSpecularLayer_102 : public testing::Test
{
    std::shared_ptr<CBSDFLayer> m_Layer;

protected:
    void SetUp() override
    {
        constexpr auto thickness = 3.048e-3;   // [m]
        const auto aMaterial =
          Material::nBandMaterial(SpectralSample::NFRC_102(), thickness, MaterialType::Monolithic);

        // create BSDF
        const auto aBSDF = BSDFHemisphere::create(BSDFBasis::Full);

        // make layer
        m_Layer = CBSDFLayerMaker::getSpecularLayer(aMaterial, aBSDF);
        m_Layer->setSourceData(StandardData::solarRadiationASTM_E891_87_Table1());
    }

public:
    std::shared_ptr<CBSDFLayer> getLayer()
    {
        return m_Layer;
    }
};

TEST_F(TestSpecularLayer_102, TestSpecular1)
{
    SCOPED_TRACE("Begin Test: Specular layer - BSDF.");

    std::shared_ptr<CBSDFLayer> aLayer = getLayer();

    auto aResults = aLayer->getResults();

    const double tauDiff = aResults.DiffDiff(Side::Front, PropertySurface::T);
    EXPECT_NEAR(0.75265482876657230, tauDiff, 1e-6);

    const double RfDiff = aResults.DiffDiff(Side::Front, PropertySurface::R);
    EXPECT_NEAR(0.14604173568524281, RfDiff, 1e-6);

    constexpr double theta = 35;
    constexpr double phi = 58;

    const double tauHem = aResults.DirHem(Side::Front, PropertySurface::T, theta, phi);
    EXPECT_NEAR(0.82700480785360742, tauHem, 1e-6);

    const double tauDir = aResults.DirDir(Side::Front, PropertySurface::T, theta, phi);
    EXPECT_NEAR(0.82700480785360742, tauDir, 1e-6);

    auto aT = aResults.getMatrix(Side::Front, PropertySurface::T);

    // Test only diagonal of transmittance matrix
    const size_t size = aT.size();

    std::vector<double> correctResults{
      34.940061244564802, 35.727444960862350, 35.727444960862350, 35.727444960862350,
      35.727444960862350, 35.727444960862350, 35.727444960862350, 35.727444960862350,
      35.727444960862350, 37.933187566186469, 37.933187566186469, 37.933187566186469,
      37.933187566186469, 37.933187566186469, 37.933187566186469, 37.933187566186469,
      37.933187566186469, 37.933187566186469, 37.933187566186469, 37.933187566186469,
      37.933187566186469, 37.933187566186469, 37.933187566186469, 37.933187566186469,
      37.933187566186469, 35.009611836870832, 35.009611836870832, 35.009611836870832,
      35.009611836870832, 35.009611836870832, 35.009611836870832, 35.009611836870832,
      35.009611836870832, 35.009611836870832, 35.009611836870832, 35.009611836870832,
      35.009611836870832, 35.009611836870832, 35.009611836870832, 35.009611836870832,
      35.009611836870832, 35.009611836870832, 35.009611836870832, 35.009611836870832,
      35.009611836870832, 36.522068529403214, 36.522068529403214, 36.522068529403214,
      36.522068529403214, 36.522068529403214, 36.522068529403214, 36.522068529403214,
      36.522068529403214, 36.522068529403214, 36.522068529403214, 36.522068529403214,
      36.522068529403214, 36.522068529403214, 36.522068529403214, 36.522068529403214,
      36.522068529403214, 36.522068529403214, 36.522068529403214, 36.522068529403214,
      36.522068529403214, 36.522068529403214, 36.522068529403214, 36.522068529403214,
      36.522068529403214, 35.586788153437524, 35.586788153437524, 35.586788153437524,
      35.586788153437524, 35.586788153437524, 35.586788153437524, 35.586788153437524,
      35.586788153437524, 35.586788153437524, 35.586788153437524, 35.586788153437524,
      35.586788153437524, 35.586788153437524, 35.586788153437524, 35.586788153437524,
      35.586788153437524, 35.586788153437524, 35.586788153437524, 35.586788153437524,
      35.586788153437524, 35.586788153437524, 35.586788153437524, 35.586788153437524,
      35.586788153437524, 38.033919314642546, 38.033919314642546, 38.033919314642546,
      38.033919314642546, 38.033919314642546, 38.033919314642546, 38.033919314642546,
      38.033919314642546, 38.033919314642546, 38.033919314642546, 38.033919314642546,
      38.033919314642546, 38.033919314642546, 38.033919314642546, 38.033919314642546,
      38.033919314642546, 38.033919314642546, 38.033919314642546, 38.033919314642546,
      38.033919314642546, 38.033919314642546, 38.033919314642546, 38.033919314642546,
      38.033919314642546, 29.061194222087263, 29.061194222087263, 29.061194222087263,
      29.061194222087263, 29.061194222087263, 29.061194222087263, 29.061194222087263,
      29.061194222087263, 29.061194222087263, 29.061194222087263, 29.061194222087263,
      29.061194222087263, 29.061194222087263, 29.061194222087263, 29.061194222087263,
      29.061194222087263, 16.978250544025638, 16.978250544025638, 16.978250544025638,
      16.978250544025638, 16.978250544025638, 16.978250544025638, 16.978250544025638,
      16.978250544025638, 16.978250544025638, 16.978250544025638, 16.978250544025638,
      16.978250544025638};

    std::vector<double> calculatedResults;
    for(size_t i = 0; i < size; ++i)
    {
        calculatedResults.push_back(aT(i, i));
    }

    EXPECT_EQ(correctResults.size(), calculatedResults.size());
    for(size_t i = 0; i < size; ++i)
    {
        EXPECT_NEAR(correctResults[i], calculatedResults[i], 1e-6);
    }

    // Front reflectance
    auto aRf = aResults.getMatrix(Side::Front, PropertySurface::R);

    calculatedResults.clear();
    correctResults = {
      3.1351336407416635, 3.2072370120929721, 3.2072370120929721, 3.2072370120929721,
      3.2072370120929721, 3.2072370120929721, 3.2072370120929721, 3.2072370120929721,
      3.2072370120929721, 3.4246526776043713, 3.4246526776043713, 3.4246526776043713,
      3.4246526776043713, 3.4246526776043713, 3.4246526776043713, 3.4246526776043713,
      3.4246526776043713, 3.4246526776043713, 3.4246526776043713, 3.4246526776043713,
      3.4246526776043713, 3.4246526776043713, 3.4246526776043713, 3.4246526776043713,
      3.4246526776043713, 3.2466935886549604, 3.2466935886549604, 3.2466935886549604,
      3.2466935886549604, 3.2466935886549604, 3.2466935886549604, 3.2466935886549604,
      3.2466935886549604, 3.2466935886549604, 3.2466935886549604, 3.2466935886549604,
      3.2466935886549604, 3.2466935886549604, 3.2466935886549604, 3.2466935886549604,
      3.2466935886549604, 3.2466935886549604, 3.2466935886549604, 3.2466935886549604,
      3.2466935886549604, 3.6858547275750588, 3.6858547275750588, 3.6858547275750588,
      3.6858547275750588, 3.6858547275750588, 3.6858547275750588, 3.6858547275750588,
      3.6858547275750588, 3.6858547275750588, 3.6858547275750588, 3.6858547275750588,
      3.6858547275750588, 3.6858547275750588, 3.6858547275750588, 3.6858547275750588,
      3.6858547275750588, 3.6858547275750588, 3.6858547275750588, 3.6858547275750588,
      3.6858547275750588, 3.6858547275750588, 3.6858547275750588, 3.6858547275750588,
      3.6858547275750588, 4.4320169592146170, 4.4320169592146170, 4.4320169592146170,
      4.4320169592146170, 4.4320169592146170, 4.4320169592146170, 4.4320169592146170,
      4.4320169592146170, 4.4320169592146170, 4.4320169592146170, 4.4320169592146170,
      4.4320169592146170, 4.4320169592146170, 4.4320169592146170, 4.4320169592146170,
      4.4320169592146170, 4.4320169592146170, 4.4320169592146170, 4.4320169592146170,
      4.4320169592146170, 4.4320169592146170, 4.4320169592146170, 4.4320169592146170,
      4.4320169592146170, 7.2672051285243091, 7.2672051285243091, 7.2672051285243091,
      7.2672051285243091, 7.2672051285243091, 7.2672051285243091, 7.2672051285243091,
      7.2672051285243091, 7.2672051285243091, 7.2672051285243091, 7.2672051285243091,
      7.2672051285243091, 7.2672051285243091, 7.2672051285243091, 7.2672051285243091,
      7.2672051285243091, 7.2672051285243091, 7.2672051285243091, 7.2672051285243091,
      7.2672051285243091, 7.2672051285243091, 7.2672051285243091, 7.2672051285243091,
      7.2672051285243091, 11.531318187987335, 11.531318187987335, 11.531318187987335,
      11.531318187987335, 11.531318187987335, 11.531318187987335, 11.531318187987335,
      11.531318187987335, 11.531318187987335, 11.531318187987335, 11.531318187987335,
      11.531318187987335, 11.531318187987335, 11.531318187987335, 11.531318187987335,
      11.531318187987335, 34.322921163935874, 34.322921163935874, 34.322921163935874,
      34.322921163935874, 34.322921163935874, 34.322921163935874, 34.322921163935874,
      34.322921163935874, 34.322921163935874, 34.322921163935874, 34.322921163935874,
      34.322921163935874};

    for(size_t i = 0; i < size; ++i)
    {
        calculatedResults.push_back(aRf(i, i));
    }

    EXPECT_EQ(correctResults.size(), calculatedResults.size());
    for(size_t i = 0; i < size; ++i)
    {
        EXPECT_NEAR(correctResults[i], calculatedResults[i], 1e-6);
    }
}

TEST_F(TestSpecularLayer_102, WavelengthByWavelengthResults)
{
    std::shared_ptr<CBSDFLayer> aLayer = getLayer();

    constexpr size_t wlIndex{5u};
    auto result = aLayer->getResultsAtWavelength(wlIndex);

    const auto diffDiff =
      result.DiffDiff(FenestrationCommon::Side::Front, FenestrationCommon::PropertySurface::T);
    constexpr auto correct{0.167105};

    EXPECT_NEAR(diffDiff, correct, 1e-6);
}

#include <memory>
#include <gtest/gtest.h>

#include <WCESpectralAveraging.hpp>
#include <WCESingleLayerOptics.hpp>
#include <WCECommon.hpp>

#include "standardData.hpp"


using namespace SingleLayerOptics;
using namespace FenestrationCommon;
using namespace SpectralAveraging;

class TestSpecularAngularLayerProperty_102 : public testing::Test
{
    std::shared_ptr<CAngularMeasurements> m_Measurements;
    std::shared_ptr<CBSDFLayer> m_Layer;
    std::shared_ptr<CMaterial> m_Material;

    static std::shared_ptr<CSingleAngularMeasurement> getSample1()
    {
        const auto aSolarRadiation = StandardData::solarRadiationASTM_E891_87_Table1();

        const auto aMeasurements0 = CSpectralSampleData::create({
          {0.290, 0, 0, 0.0481, 0.0481},           {0.295, 0, 0, 0.0479, 0.0479},
          {0.300, 0, 0, 0.0476, 0.0476},           {0.305, 0, 0, 0.0474, 0.0474},
          {0.310, 0.007, 0.007, 0.0471, 0.0471},   {0.315, 0.035, 0.035, 0.047, 0.047},
          {0.320, 0.0975, 0.0975, 0.0472, 0.0472}, {0.325, 0.2099, 0.2099, 0.0487, 0.0487},
          {0.330, 0.3497, 0.3497, 0.0525, 0.0525}, {0.335, 0.4865, 0.4865, 0.0581, 0.0581},
          {0.340, 0.6057, 0.6057, 0.0644, 0.0644}, {0.345, 0.7035, 0.7035, 0.0706, 0.0706},
          {0.350, 0.7687, 0.7687, 0.0751, 0.0751}, {0.355, 0.812, 0.812, 0.0783, 0.0783},
          {0.360, 0.8429, 0.8429, 0.0806, 0.0806}, {0.365, 0.862, 0.862, 0.0819, 0.0819},
          {0.370, 0.8678, 0.8678, 0.0821, 0.0821}, {0.375, 0.8672, 0.8672, 0.0819, 0.0819},
          {0.380, 0.8554, 0.8554, 0.0806, 0.0806}, {0.385, 0.8696, 0.8696, 0.0816, 0.0816},
          {0.390, 0.8804, 0.8804, 0.0823, 0.0823}, {0.395, 0.8884, 0.8884, 0.0828, 0.0828},
          {0.400, 0.8924, 0.8924, 0.083, 0.083},   {0.410, 0.8944, 0.8944, 0.0828, 0.0828},
          {0.420, 0.8921, 0.8921, 0.0823, 0.0823}, {0.430, 0.8914, 0.8914, 0.082, 0.082},
          {0.440, 0.8896, 0.8896, 0.0815, 0.0815}, {0.450, 0.8933, 0.8933, 0.0816, 0.0816},
          {0.460, 0.8972, 0.8972, 0.0817, 0.0817}, {0.470, 0.8991, 0.8991, 0.0816, 0.0816},
          {0.480, 0.9013, 0.9013, 0.0816, 0.0816}, {0.490, 0.9026, 0.9026, 0.0815, 0.0815},
          {0.500, 0.9026, 0.9026, 0.0813, 0.0813}, {0.510, 0.9031, 0.9031, 0.0811, 0.0811},
          {0.520, 0.9025, 0.9025, 0.0809, 0.0809}, {0.530, 0.9028, 0.9028, 0.0808, 0.0808},
          {0.540, 0.9033, 0.9033, 0.0807, 0.0807}, {0.550, 0.9013, 0.9013, 0.0804, 0.0804},
          {0.560, 0.8999, 0.8999, 0.0802, 0.0802}, {0.570, 0.8986, 0.8986, 0.0799, 0.0799},
          {0.580, 0.8975, 0.8975, 0.0797, 0.0797}, {0.590, 0.8939, 0.8939, 0.0793, 0.0793},
          {0.600, 0.8919, 0.8919, 0.079, 0.079},   {0.610, 0.891, 0.891, 0.0789, 0.0789},
          {0.620, 0.8853, 0.8853, 0.0783, 0.0783}, {0.630, 0.8838, 0.8838, 0.0781, 0.0781},
          {0.640, 0.8806, 0.8806, 0.0777, 0.0777}, {0.650, 0.8769, 0.8769, 0.0773, 0.0773},
          {0.660, 0.8735, 0.8735, 0.077, 0.077},   {0.670, 0.8731, 0.8731, 0.0769, 0.0769},
          {0.680, 0.8665, 0.8665, 0.0763, 0.0763}, {0.690, 0.8637, 0.8637, 0.076, 0.076},
          {0.700, 0.8607, 0.8607, 0.0757, 0.0757}, {0.710, 0.8557, 0.8557, 0.0753, 0.0753},
          {0.720, 0.8531, 0.8531, 0.075, 0.075},   {0.730, 0.8487, 0.8487, 0.0746, 0.0746},
          {0.740, 0.8418, 0.8418, 0.074, 0.074},   {0.750, 0.8406, 0.8406, 0.0738, 0.0738},
          {0.760, 0.8358, 0.8358, 0.0734, 0.0734}, {0.770, 0.8341, 0.8341, 0.0732, 0.0732},
          {0.780, 0.8324, 0.8324, 0.073, 0.073},   {0.790, 0.8232, 0.8232, 0.0723, 0.0723},
          {0.800, 0.8246, 0.8246, 0.0723, 0.0723}, {0.850, 0.8076, 0.8076, 0.0708, 0.0708},
          {0.900, 0.8002, 0.8002, 0.07, 0.07},     {0.950, 0.7907, 0.7907, 0.0692, 0.0692},
          {1.000, 0.7862, 0.7862, 0.0687, 0.0687}, {1.050, 0.7849, 0.7849, 0.0685, 0.0685},
          {1.100, 0.7848, 0.7848, 0.0683, 0.0683}, {1.150, 0.7864, 0.7864, 0.0683, 0.0683},
          {1.200, 0.7894, 0.7894, 0.0685, 0.0685}, {1.250, 0.7944, 0.7944, 0.0687, 0.0687},
          {1.300, 0.8014, 0.8014, 0.0691, 0.0691}, {1.350, 0.8088, 0.8088, 0.0695, 0.0695},
          {1.400, 0.8168, 0.8168, 0.07, 0.07},     {1.450, 0.8261, 0.8261, 0.0705, 0.0705},
          {1.500, 0.8366, 0.8366, 0.0712, 0.0712}, {1.550, 0.8444, 0.8444, 0.0716, 0.0716},
          {1.600, 0.8506, 0.8506, 0.0719, 0.0719}, {1.650, 0.853, 0.853, 0.072, 0.072},
          {1.700, 0.8527, 0.8527, 0.0719, 0.0719}, {1.750, 0.8532, 0.8532, 0.0718, 0.0718},
          {1.800, 0.8504, 0.8504, 0.0714, 0.0714}, {1.850, 0.8488, 0.8488, 0.0712, 0.0712},
          {1.900, 0.8523, 0.8523, 0.0713, 0.0713}, {1.950, 0.8497, 0.8497, 0.071, 0.071},
          {2.000, 0.848, 0.848, 0.0708, 0.0708},   {2.050, 0.8488, 0.8488, 0.0707, 0.0707},
          {2.100, 0.8505, 0.8505, 0.0707, 0.0707}, {2.150, 0.8408, 0.8408, 0.0699, 0.0699},
          {2.200, 0.8304, 0.8304, 0.0691, 0.0691}, {2.250, 0.8277, 0.8277, 0.0688, 0.0688},
          {2.300, 0.8303, 0.8303, 0.0688, 0.0688}, {2.350, 0.834, 0.834, 0.069, 0.069},
          {2.400, 0.8236, 0.8236, 0.0681, 0.0681}, {2.450, 0.8225, 0.8225, 0.0679, 0.0679},
          {2.500, 0.8184, 0.8184, 0.0675, 0.0675},
        });


        std::shared_ptr<CSpectralSample> aSample0 =
          std::make_shared<CSpectralSample>(aMeasurements0, aSolarRadiation);
        std::shared_ptr<CSingleAngularMeasurement> aAngular0 =
          std::make_shared<CSingleAngularMeasurement>(aSample0, 0.0);

        return aAngular0;
    }

    static std::shared_ptr<CSingleAngularMeasurement> getSample2()
    {
        const auto aSolarRadiation = StandardData::solarRadiationASTM_E891_87_Table1();

        std::shared_ptr<CSpectralSampleData> aMeasurements1 = CSpectralSampleData::create({
          {0.290, 0, 0, 0.0481, 0.0481},           {0.295, 0, 0, 0.0479, 0.0479},
          {0.300, 0, 0, 0.0476, 0.0476},           {0.305, 0, 0, 0.0474, 0.0474},
          {0.310, 0.0068, 0.0068, 0.0471, 0.0471}, {0.315, 0.0343, 0.0343, 0.047, 0.047},
          {0.320, 0.0961, 0.0961, 0.0472, 0.0472}, {0.325, 0.208, 0.208, 0.0487, 0.0487},
          {0.330, 0.3476, 0.3476, 0.0524, 0.0524}, {0.335, 0.4845, 0.4845, 0.058, 0.058},
          {0.340, 0.6041, 0.6041, 0.0643, 0.0643}, {0.345, 0.7023, 0.7023, 0.0705, 0.0705},
          {0.350, 0.7678, 0.7678, 0.0751, 0.0751}, {0.355, 0.8114, 0.8114, 0.0783, 0.0783},
          {0.360, 0.8424, 0.8424, 0.0805, 0.0805}, {0.365, 0.8617, 0.8617, 0.0819, 0.0819},
          {0.370, 0.8675, 0.8675, 0.0821, 0.0821}, {0.375, 0.8669, 0.8669, 0.0819, 0.0819},
          {0.380, 0.8551, 0.8551, 0.0806, 0.0806}, {0.385, 0.8693, 0.8693, 0.0816, 0.0816},
          {0.390, 0.8802, 0.8802, 0.0823, 0.0823}, {0.395, 0.8882, 0.8882, 0.0829, 0.0829},
          {0.400, 0.8922, 0.8922, 0.083, 0.083},   {0.410, 0.8943, 0.8943, 0.0829, 0.0829},
          {0.420, 0.8919, 0.8919, 0.0823, 0.0823}, {0.430, 0.8912, 0.8912, 0.082, 0.082},
          {0.440, 0.8894, 0.8894, 0.0815, 0.0815}, {0.450, 0.8931, 0.8931, 0.0816, 0.0816},
          {0.460, 0.8971, 0.8971, 0.0817, 0.0817}, {0.470, 0.8989, 0.8989, 0.0816, 0.0816},
          {0.480, 0.9011, 0.9011, 0.0816, 0.0816}, {0.490, 0.9025, 0.9025, 0.0815, 0.0815},
          {0.500, 0.9025, 0.9025, 0.0813, 0.0813}, {0.510, 0.903, 0.903, 0.0812, 0.0812},
          {0.520, 0.9024, 0.9024, 0.0809, 0.0809}, {0.530, 0.9027, 0.9027, 0.0808, 0.0808},
          {0.540, 0.9032, 0.9032, 0.0807, 0.0807}, {0.550, 0.9011, 0.9011, 0.0804, 0.0804},
          {0.560, 0.8998, 0.8998, 0.0802, 0.0802}, {0.570, 0.8985, 0.8985, 0.0799, 0.0799},
          {0.580, 0.8974, 0.8974, 0.0797, 0.0797}, {0.590, 0.8937, 0.8937, 0.0793, 0.0793},
          {0.600, 0.8917, 0.8917, 0.079, 0.079},   {0.610, 0.8908, 0.8908, 0.0789, 0.0789},
          {0.620, 0.885, 0.885, 0.0783, 0.0783},   {0.630, 0.8835, 0.8835, 0.0781, 0.0781},
          {0.640, 0.8803, 0.8803, 0.0777, 0.0777}, {0.650, 0.8766, 0.8766, 0.0774, 0.0774},
          {0.660, 0.8732, 0.8732, 0.077, 0.077},   {0.670, 0.8728, 0.8728, 0.0769, 0.0769},
          {0.680, 0.8662, 0.8662, 0.0763, 0.0763}, {0.690, 0.8633, 0.8633, 0.076, 0.076},
          {0.700, 0.8603, 0.8603, 0.0757, 0.0757}, {0.710, 0.8552, 0.8552, 0.0753, 0.0753},
          {0.720, 0.8527, 0.8527, 0.075, 0.075},   {0.730, 0.8482, 0.8482, 0.0746, 0.0746},
          {0.740, 0.8413, 0.8413, 0.074, 0.074},   {0.750, 0.8401, 0.8401, 0.0738, 0.0738},
          {0.760, 0.8352, 0.8352, 0.0734, 0.0734}, {0.770, 0.8335, 0.8335, 0.0732, 0.0732},
          {0.780, 0.8318, 0.8318, 0.073, 0.073},   {0.790, 0.8225, 0.8225, 0.0722, 0.0722},
          {0.800, 0.824, 0.824, 0.0723, 0.0723},   {0.850, 0.8069, 0.8069, 0.0708, 0.0708},
          {0.900, 0.7994, 0.7994, 0.07, 0.07},     {0.950, 0.7899, 0.7899, 0.0691, 0.0691},
          {1.000, 0.7854, 0.7854, 0.0686, 0.0686}, {1.050, 0.7841, 0.7841, 0.0684, 0.0684},
          {1.100, 0.7839, 0.7839, 0.0683, 0.0683}, {1.150, 0.7856, 0.7856, 0.0683, 0.0683},
          {1.200, 0.7886, 0.7886, 0.0684, 0.0684}, {1.250, 0.7936, 0.7936, 0.0687, 0.0687},
          {1.300, 0.8006, 0.8006, 0.069, 0.069},   {1.350, 0.8081, 0.8081, 0.0695, 0.0695},
          {1.400, 0.8162, 0.8162, 0.0699, 0.0699}, {1.450, 0.8255, 0.8255, 0.0705, 0.0705},
          {1.500, 0.836, 0.836, 0.0711, 0.0711},   {1.550, 0.8439, 0.8439, 0.0716, 0.0716},
          {1.600, 0.8501, 0.8501, 0.0719, 0.0719}, {1.650, 0.8525, 0.8525, 0.072, 0.072},
          {1.700, 0.8522, 0.8522, 0.0719, 0.0719}, {1.750, 0.8527, 0.8527, 0.0718, 0.0718},
          {1.800, 0.8499, 0.8499, 0.0714, 0.0714}, {1.850, 0.8483, 0.8483, 0.0712, 0.0712},
          {1.900, 0.8518, 0.8518, 0.0713, 0.0713}, {1.950, 0.8492, 0.8492, 0.071, 0.071},
          {2.000, 0.8475, 0.8475, 0.0708, 0.0708}, {2.050, 0.8483, 0.8483, 0.0707, 0.0707},
          {2.100, 0.85, 0.85, 0.0707, 0.0707},     {2.150, 0.8402, 0.8402, 0.0699, 0.0699},
          {2.200, 0.8298, 0.8298, 0.069, 0.069},   {2.250, 0.8271, 0.8271, 0.0687, 0.0687},
          {2.300, 0.8297, 0.8297, 0.0688, 0.0688}, {2.350, 0.8334, 0.8334, 0.069, 0.069},
          {2.400, 0.823, 0.823, 0.0681, 0.0681},   {2.450, 0.8218, 0.8218, 0.0679, 0.0679},
          {2.500, 0.8176, 0.8176, 0.0675, 0.0675},
        });

        std::shared_ptr<CSpectralSample> aSample1 =
          std::make_shared<CSpectralSample>(aMeasurements1, aSolarRadiation);
        std::shared_ptr<CSingleAngularMeasurement> aAngular1 =
          std::make_shared<CSingleAngularMeasurement>(aSample1, 10.0);

        return aAngular1;
    }

    static std::shared_ptr<CSingleAngularMeasurement> getSample3()
    {
        const auto aSolarRadiation = StandardData::solarRadiationASTM_E891_87_Table1();

        std::shared_ptr<CSpectralSampleData> aMeasurements4 = CSpectralSampleData::create({
          {0.290, 0, 0, 0.0993, 0.0993},           {0.295, 0, 0, 0.099, 0.099},
          {0.300, 0, 0, 0.0986, 0.0986},           {0.305, 0, 0, 0.0984, 0.0984},
          {0.310, 0.0023, 0.0023, 0.098, 0.098},   {0.315, 0.0161, 0.0161, 0.0978, 0.0978},
          {0.320, 0.0553, 0.0553, 0.0979, 0.0979}, {0.325, 0.1392, 0.1392, 0.0996, 0.0996},
          {0.330, 0.2575, 0.2575, 0.1049, 0.1049}, {0.335, 0.3836, 0.3836, 0.1143, 0.1143},
          {0.340, 0.5002, 0.5002, 0.1261, 0.1261}, {0.345, 0.5999, 0.5999, 0.1387, 0.1387},
          {0.350, 0.6682, 0.6682, 0.1485, 0.1485}, {0.355, 0.7145, 0.7145, 0.1556, 0.1556},
          {0.360, 0.7478, 0.7478, 0.1609, 0.1609}, {0.365, 0.7686, 0.7686, 0.1643, 0.1643},
          {0.370, 0.775, 0.775, 0.1651, 0.1651},   {0.375, 0.7743, 0.7743, 0.1647, 0.1647},
          {0.380, 0.7614, 0.7614, 0.1622, 0.1622}, {0.385, 0.7769, 0.7769, 0.1646, 0.1646},
          {0.390, 0.7887, 0.7887, 0.1665, 0.1665}, {0.395, 0.7975, 0.7975, 0.1678, 0.1678},
          {0.400, 0.8019, 0.8019, 0.1684, 0.1684}, {0.410, 0.8042, 0.8042, 0.1684, 0.1684},
          {0.420, 0.8015, 0.8015, 0.1675, 0.1675}, {0.430, 0.8008, 0.8008, 0.167, 0.167},
          {0.440, 0.7988, 0.7988, 0.1663, 0.1663}, {0.450, 0.8028, 0.8028, 0.1668, 0.1668},
          {0.460, 0.8073, 0.8073, 0.1673, 0.1673}, {0.470, 0.8093, 0.8093, 0.1674, 0.1674},
          {0.480, 0.8117, 0.8117, 0.1675, 0.1675}, {0.490, 0.8132, 0.8132, 0.1675, 0.1675},
          {0.500, 0.8132, 0.8132, 0.1673, 0.1673}, {0.510, 0.8138, 0.8138, 0.1672, 0.1672},
          {0.520, 0.8131, 0.8131, 0.1668, 0.1668}, {0.530, 0.8135, 0.8135, 0.1667, 0.1667},
          {0.540, 0.814, 0.814, 0.1666, 0.1666},   {0.550, 0.8117, 0.8117, 0.1661, 0.1661},
          {0.560, 0.8102, 0.8102, 0.1656, 0.1656}, {0.570, 0.8088, 0.8088, 0.1652, 0.1652},
          {0.580, 0.8076, 0.8076, 0.1648, 0.1648}, {0.590, 0.8035, 0.8035, 0.164, 0.164},
          {0.600, 0.8013, 0.8013, 0.1634, 0.1634}, {0.610, 0.8003, 0.8003, 0.1632, 0.1632},
          {0.620, 0.794, 0.794, 0.1619, 0.1619},   {0.630, 0.7923, 0.7923, 0.1615, 0.1615},
          {0.640, 0.7888, 0.7888, 0.1608, 0.1608}, {0.650, 0.7848, 0.7848, 0.16, 0.16},
          {0.660, 0.781, 0.781, 0.1593, 0.1593},   {0.670, 0.7806, 0.7806, 0.1591, 0.1591},
          {0.680, 0.7733, 0.7733, 0.1578, 0.1578}, {0.690, 0.7702, 0.7702, 0.1571, 0.1571},
          {0.700, 0.7669, 0.7669, 0.1565, 0.1565}, {0.710, 0.7614, 0.7614, 0.1555, 0.1555},
          {0.720, 0.7586, 0.7586, 0.155, 0.155},   {0.730, 0.7537, 0.7537, 0.1541, 0.1541},
          {0.740, 0.7462, 0.7462, 0.1528, 0.1528}, {0.750, 0.7449, 0.7449, 0.1525, 0.1525},
          {0.760, 0.7396, 0.7396, 0.1515, 0.1515}, {0.770, 0.7378, 0.7378, 0.1512, 0.1512},
          {0.780, 0.7359, 0.7359, 0.1508, 0.1508}, {0.790, 0.7259, 0.7259, 0.1491, 0.1491},
          {0.800, 0.7275, 0.7275, 0.1493, 0.1493}, {0.850, 0.709, 0.709, 0.1461, 0.1461},
          {0.900, 0.7009, 0.7009, 0.1445, 0.1445}, {0.950, 0.6907, 0.6907, 0.1428, 0.1428},
          {1.000, 0.6858, 0.6858, 0.1418, 0.1418}, {1.050, 0.6844, 0.6844, 0.1415, 0.1415},
          {1.100, 0.6843, 0.6843, 0.1413, 0.1413}, {1.150, 0.686, 0.686, 0.1414, 0.1414},
          {1.200, 0.6892, 0.6892, 0.1418, 0.1418}, {1.250, 0.6946, 0.6946, 0.1424, 0.1424},
          {1.300, 0.7021, 0.7021, 0.1434, 0.1434}, {1.350, 0.7101, 0.7101, 0.1445, 0.1445},
          {1.400, 0.7188, 0.7188, 0.1457, 0.1457}, {1.450, 0.729, 0.729, 0.1471, 0.1471},
          {1.500, 0.7404, 0.7404, 0.1488, 0.1488}, {1.550, 0.7489, 0.7489, 0.15, 0.15},
          {1.600, 0.7557, 0.7557, 0.1509, 0.1509}, {1.650, 0.7583, 0.7583, 0.1512, 0.1512},
          {1.700, 0.758, 0.758, 0.151, 0.151},     {1.750, 0.7585, 0.7585, 0.1509, 0.1509},
          {1.800, 0.7554, 0.7554, 0.1503, 0.1503}, {1.850, 0.7537, 0.7537, 0.1498, 0.1498},
          {1.900, 0.7575, 0.7575, 0.1503, 0.1503}, {1.950, 0.7546, 0.7546, 0.1497, 0.1497},
          {2.000, 0.7528, 0.7528, 0.1492, 0.1492}, {2.050, 0.7536, 0.7536, 0.1492, 0.1492},
          {2.100, 0.7555, 0.7555, 0.1494, 0.1494}, {2.150, 0.7449, 0.7449, 0.1475, 0.1475},
          {2.200, 0.7335, 0.7335, 0.1456, 0.1456}, {2.250, 0.7305, 0.7305, 0.145, 0.145},
          {2.300, 0.7334, 0.7334, 0.1453, 0.1453}, {2.350, 0.7374, 0.7374, 0.1458, 0.1458},
          {2.400, 0.7261, 0.7261, 0.1439, 0.1439}, {2.450, 0.7248, 0.7248, 0.1436, 0.1436},
          {2.500, 0.7203, 0.7203, 0.1427, 0.1427},
        });

        std::shared_ptr<CSpectralSample> aSample4 =
          std::make_shared<CSpectralSample>(aMeasurements4, aSolarRadiation);
        std::shared_ptr<CSingleAngularMeasurement> aAngular4 =
          std::make_shared<CSingleAngularMeasurement>(aSample4, 40.0);

        return aAngular4;
    }

    std::shared_ptr<CSingleAngularMeasurement> getSample4()
    {
        const auto aSolarRadiation = StandardData::solarRadiationASTM_E891_87_Table1();

        std::shared_ptr<CSpectralSampleData> aMeasurements9 = CSpectralSampleData::create({
          {0.290, 0, 0, 1, 1}, {0.295, 0, 0, 1, 1}, {0.300, 0, 0, 1, 1}, {0.305, 0, 0, 1, 1},
          {0.310, 0, 0, 1, 1}, {0.315, 0, 0, 1, 1}, {0.320, 0, 0, 1, 1}, {0.325, 0, 0, 1, 1},
          {0.330, 0, 0, 1, 1}, {0.335, 0, 0, 1, 1}, {0.340, 0, 0, 1, 1}, {0.345, 0, 0, 1, 1},
          {0.350, 0, 0, 1, 1}, {0.355, 0, 0, 1, 1}, {0.360, 0, 0, 1, 1}, {0.365, 0, 0, 1, 1},
          {0.370, 0, 0, 1, 1}, {0.375, 0, 0, 1, 1}, {0.380, 0, 0, 1, 1}, {0.385, 0, 0, 1, 1},
          {0.390, 0, 0, 1, 1}, {0.395, 0, 0, 1, 1}, {0.400, 0, 0, 1, 1}, {0.410, 0, 0, 1, 1},
          {0.420, 0, 0, 1, 1}, {0.430, 0, 0, 1, 1}, {0.440, 0, 0, 1, 1}, {0.450, 0, 0, 1, 1},
          {0.460, 0, 0, 1, 1}, {0.470, 0, 0, 1, 1}, {0.480, 0, 0, 1, 1}, {0.490, 0, 0, 1, 1},
          {0.500, 0, 0, 1, 1}, {0.510, 0, 0, 1, 1}, {0.520, 0, 0, 1, 1}, {0.530, 0, 0, 1, 1},
          {0.540, 0, 0, 1, 1}, {0.550, 0, 0, 1, 1}, {0.560, 0, 0, 1, 1}, {0.570, 0, 0, 1, 1},
          {0.580, 0, 0, 1, 1}, {0.590, 0, 0, 1, 1}, {0.600, 0, 0, 1, 1}, {0.610, 0, 0, 1, 1},
          {0.620, 0, 0, 1, 1}, {0.630, 0, 0, 1, 1}, {0.640, 0, 0, 1, 1}, {0.650, 0, 0, 1, 1},
          {0.660, 0, 0, 1, 1}, {0.670, 0, 0, 1, 1}, {0.680, 0, 0, 1, 1}, {0.690, 0, 0, 1, 1},
          {0.700, 0, 0, 1, 1}, {0.710, 0, 0, 1, 1}, {0.720, 0, 0, 1, 1}, {0.730, 0, 0, 1, 1},
          {0.740, 0, 0, 1, 1}, {0.750, 0, 0, 1, 1}, {0.760, 0, 0, 1, 1}, {0.770, 0, 0, 1, 1},
          {0.780, 0, 0, 1, 1}, {0.790, 0, 0, 1, 1}, {0.800, 0, 0, 1, 1}, {0.850, 0, 0, 1, 1},
          {0.900, 0, 0, 1, 1}, {0.950, 0, 0, 1, 1}, {1.000, 0, 0, 1, 1}, {1.050, 0, 0, 1, 1},
          {1.100, 0, 0, 1, 1}, {1.150, 0, 0, 1, 1}, {1.200, 0, 0, 1, 1}, {1.250, 0, 0, 1, 1},
          {1.300, 0, 0, 1, 1}, {1.350, 0, 0, 1, 1}, {1.400, 0, 0, 1, 1}, {1.450, 0, 0, 1, 1},
          {1.500, 0, 0, 1, 1}, {1.550, 0, 0, 1, 1}, {1.600, 0, 0, 1, 1}, {1.650, 0, 0, 1, 1},
          {1.700, 0, 0, 1, 1}, {1.750, 0, 0, 1, 1}, {1.800, 0, 0, 1, 1}, {1.850, 0, 0, 1, 1},
          {1.900, 0, 0, 1, 1}, {1.950, 0, 0, 1, 1}, {2.000, 0, 0, 1, 1}, {2.050, 0, 0, 1, 1},
          {2.100, 0, 0, 1, 1}, {2.150, 0, 0, 1, 1}, {2.200, 0, 0, 1, 1}, {2.250, 0, 0, 1, 1},
          {2.300, 0, 0, 1, 1}, {2.350, 0, 0, 1, 1}, {2.400, 0, 0, 1, 1}, {2.450, 0, 0, 1, 1},
          {2.500, 0, 0, 1, 1},
        });

        std::shared_ptr<CSpectralSample> aSample9 =
          std::make_shared<CSpectralSample>(aMeasurements9, aSolarRadiation);
        std::shared_ptr<CSingleAngularMeasurement> aAngular9 =
          std::make_shared<CSingleAngularMeasurement>(aSample9, 90.0);

        return aAngular9;
    }

protected:
    void SetUp() override
    {
        std::shared_ptr<CSingleAngularMeasurement> aAngular0 = getSample1();
        std::shared_ptr<CSingleAngularMeasurement> aAngular1 = getSample2();
        std::shared_ptr<CSingleAngularMeasurement> aAngular4 = getSample3();
        std::shared_ptr<CSingleAngularMeasurement> aAngular9 = getSample4();

        // Need to extract common wavelengths
        CCommonWavelengths aCommonWL;
        std::vector<double> wl0 = aAngular0->getWavelengthsFromSample();
        std::vector<double> wl10 = aAngular1->getWavelengthsFromSample();
        std::vector<double> wl40 = aAngular4->getWavelengthsFromSample();
        std::vector<double> wl90 = aAngular9->getWavelengthsFromSample();
        aCommonWL.addWavelength(wl0);
        aCommonWL.addWavelength(wl10);
        aCommonWL.addWavelength(wl40);
        aCommonWL.addWavelength(wl90);
        std::vector<double> commonWavelengths =
          aCommonWL.getCombinedWavelengths(Combine::Interpolate);

        // Creating angular sample

        m_Measurements = std::make_shared<CAngularMeasurements>(aAngular0, commonWavelengths);
        m_Measurements->addMeasurement(aAngular1);
        m_Measurements->addMeasurement(aAngular4);
        m_Measurements->addMeasurement(aAngular9);

        std::shared_ptr<CMaterial> aMaterial = std::make_shared<CMaterialMeasured>(m_Measurements);
        m_Material = aMaterial;
    }

public:
    std::shared_ptr<CBSDFLayer> getLayer()
    {
        return m_Layer;
    };

    std::shared_ptr<CAngularMeasurements> getMeasurements() const
    {
        return m_Measurements;
    };

    std::shared_ptr<CMaterial> getMaterials() const
    {
        return m_Material;
    };
};

TEST_F(TestSpecularAngularLayerProperty_102, TestSpecularAngular10degree)
{
    SCOPED_TRACE("Begin Test: Specular and Angular layer to compare optical properties at "
                 "different incident angles.");

    CBeamDirection angle(10, 0);

    std::shared_ptr<CMaterial> aMaterial = getMaterials();

    double trans = aMaterial->getProperty(Property::T, Side::Front, angle);
    double refleF = aMaterial->getProperty(Property::R, Side::Front, angle);
    double refleB = aMaterial->getProperty(Property::R, Side::Back, angle);

    EXPECT_NEAR(0.84356824495725335, trans, 1e-6);
    EXPECT_NEAR(0.074383187635746806, refleF, 1e-6);
    EXPECT_NEAR(0.074383187635746806, refleB, 1e-6);
}

TEST_F(TestSpecularAngularLayerProperty_102, TestSpecularAngular25degree)
{
    SCOPED_TRACE("Begin Test: Specular and Angular layer to compare optical properties at "
                 "different incident angles.");

    CBeamDirection angle(25, 0);

    std::shared_ptr<CMaterial> aMaterial = getMaterials();

    double trans = aMaterial->getProperty(Property::T, Side::Front, angle);
    double refleF = aMaterial->getProperty(Property::R, Side::Front, angle);
    double refleB = aMaterial->getProperty(Property::R, Side::Back, angle);
    std::vector<double> aTrans = aMaterial->getBandProperties(Property::T, Side::Front, angle);

    EXPECT_NEAR(0.79636496475913876, trans, 1e-6);
    EXPECT_NEAR(0.11405492103460167, refleF, 1e-6);
    EXPECT_NEAR(0.11405492103460167, refleB, 1e-6);
}

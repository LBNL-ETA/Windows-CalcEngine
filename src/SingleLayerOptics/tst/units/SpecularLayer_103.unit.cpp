#include <memory>
#include <gtest/gtest.h>

#include <WCESingleLayerOptics.hpp>
#include <WCESpectralAveraging.hpp>
#include <WCECommon.hpp>

#include "standardData.hpp"
#include "spectralSampleData.hpp"

using namespace SingleLayerOptics;
using namespace FenestrationCommon;
using namespace SpectralAveraging;

class TestSpecularLayer_103 : public testing::Test
{
    std::shared_ptr<CBSDFLayer> m_Layer;

protected:
    void SetUp() override
    {
        constexpr auto thickness = 5.715e-3;   // [m]
        auto aMaterial =
          Material::nBandMaterial(SpectralSample::NFRC_103(), thickness, MaterialType::Monolithic);

        // Define BSDF
        const auto aBSDF = BSDFHemisphere::create(BSDFBasis::Full);

        // make layer
        m_Layer = CBSDFLayerMaker::getSpecularLayer(aMaterial, aBSDF);
        m_Layer->setSourceData(StandardData::solarRadiationASTM_E891_87_Table1());
    }

public:
    std::shared_ptr<CBSDFLayer> getLayer()
    {
        return m_Layer;
    }
};

TEST_F(TestSpecularLayer_103, TestSpecular1)
{
    SCOPED_TRACE("Begin Test: Specular layer - BSDF.");

    std::shared_ptr<CBSDFLayer> aLayer = getLayer();

    BSDFIntegrator aResults = aLayer->getResults();

    const double tauDiff = aResults.DiffDiff(Side::Front, PropertySurface::T);
    EXPECT_NEAR(0.68823803381618487, tauDiff, 1e-6);

    const double RfDiff = aResults.DiffDiff(Side::Front, PropertySurface::R);
    EXPECT_NEAR(0.13803530512699569, RfDiff, 1e-6);

    constexpr double theta = 23;
    constexpr double phi = 198;

    const double tauHem = aResults.DirHem(Side::Front, PropertySurface::T, theta, phi);
    EXPECT_NEAR(0.76691124365416619, tauHem, 1e-6);

    const double tauDir = aResults.DirDir(Side::Front, PropertySurface::T, theta, phi);
    EXPECT_NEAR(0.76691124365416619, tauDir, 1e-6);

    auto aT = aResults.getMatrix(Side::Front, PropertySurface::T);

    // Test only diagonal of transmittance matrix
    const size_t size = aT.size();

    std::vector<double> correctResults{
      32.294776447203247, 33.006380866841823, 33.006380866841823, 33.006380866841823,
      33.006380866841823, 33.006380866841823, 33.006380866841823, 33.006380866841823,
      33.006380866841823, 34.992702796347736, 34.992702796347736, 34.992702796347736,
      34.992702796347736, 34.992702796347736, 34.992702796347736, 34.992702796347736,
      34.992702796347736, 34.992702796347736, 34.992702796347736, 34.992702796347736,
      34.992702796347736, 34.992702796347736, 34.992702796347736, 34.992702796347736,
      34.992702796347736, 32.217023531752325, 32.217023531752325, 32.217023531752325,
      32.217023531752325, 32.217023531752325, 32.217023531752325, 32.217023531752325,
      32.217023531752325, 32.217023531752325, 32.217023531752325, 32.217023531752325,
      32.217023531752325, 32.217023531752325, 32.217023531752325, 32.217023531752325,
      32.217023531752325, 32.217023531752325, 32.217023531752325, 32.217023531752325,
      32.217023531752325, 33.495205077232704, 33.495205077232704, 33.495205077232704,
      33.495205077232704, 33.495205077232704, 33.495205077232704, 33.495205077232704,
      33.495205077232704, 33.495205077232704, 33.495205077232704, 33.495205077232704,
      33.495205077232704, 33.495205077232704, 33.495205077232704, 33.495205077232704,
      33.495205077232704, 33.495205077232704, 33.495205077232704, 33.495205077232704,
      33.495205077232704, 33.495205077232704, 33.495205077232704, 33.495205077232704,
      33.495205077232704, 32.498117709812746, 32.498117709812746, 32.498117709812746,
      32.498117709812746, 32.498117709812746, 32.498117709812746, 32.498117709812746,
      32.498117709812746, 32.498117709812746, 32.498117709812746, 32.498117709812746,
      32.498117709812746, 32.498117709812746, 32.498117709812746, 32.498117709812746,
      32.498117709812746, 32.498117709812746, 32.498117709812746, 32.498117709812746,
      32.498117709812746, 32.498117709812746, 32.498117709812746, 32.498117709812746,
      32.498117709812746, 34.554542172924990, 34.554542172924990, 34.554542172924990,
      34.554542172924990, 34.554542172924990, 34.554542172924990, 34.554542172924990,
      34.554542172924990, 34.554542172924990, 34.554542172924990, 34.554542172924990,
      34.554542172924990, 34.554542172924990, 34.554542172924990, 34.554542172924990,
      34.554542172924990, 34.554542172924990, 34.554542172924990, 34.554542172924990,
      34.554542172924990, 34.554542172924990, 34.554542172924990, 34.554542172924990,
      34.554542172924990, 26.228678844675056, 26.228678844675056, 26.228678844675056,
      26.228678844675056, 26.228678844675056, 26.228678844675056, 26.228678844675056,
      26.228678844675056, 26.228678844675056, 26.228678844675056, 26.228678844675056,
      26.228678844675056, 26.228678844675056, 26.228678844675056, 26.228678844675056,
      26.228678844675056, 14.922971889762241, 14.922971889762241, 14.922971889762241,
      14.922971889762241, 14.922971889762241, 14.922971889762241, 14.922971889762241,
      14.922971889762241, 14.922971889762241, 14.922971889762241, 14.922971889762241,
      14.922971889762241};


    EXPECT_EQ(correctResults.size(), aT.size());
    for(size_t i = 0; i < size; ++i)
    {
        EXPECT_NEAR(correctResults[i], aT(i, i), 1e-6);
    }

    // Front reflectance
    auto aRf = aResults.getMatrix(Side::Front, PropertySurface::R);

    correctResults = {
      2.9326345631447182, 2.9992304210494063, 2.9992304210494063, 2.9992304210494063,
      2.9992304210494063, 2.9992304210494063, 2.9992304210494063, 2.9992304210494063,
      2.9992304210494063, 3.2001505542995270, 3.2001505542995270, 3.2001505542995270,
      3.2001505542995270, 3.2001505542995270, 3.2001505542995270, 3.2001505542995270,
      3.2001505542995270, 3.2001505542995270, 3.2001505542995270, 3.2001505542995270,
      3.2001505542995270, 3.2001505542995270, 3.2001505542995270, 3.2001505542995270,
      3.2001505542995270, 3.0313444596793500, 3.0313444596793500, 3.0313444596793500,
      3.0313444596793500, 3.0313444596793500, 3.0313444596793500, 3.0313444596793500,
      3.0313444596793500, 3.0313444596793500, 3.0313444596793500, 3.0313444596793500,
      3.0313444596793500, 3.0313444596793500, 3.0313444596793500, 3.0313444596793500,
      3.0313444596793500, 3.0313444596793500, 3.0313444596793500, 3.0313444596793500,
      3.0313444596793500, 3.4411667517902407, 3.4411667517902407, 3.4411667517902407,
      3.4411667517902407, 3.4411667517902407, 3.4411667517902407, 3.4411667517902407,
      3.4411667517902407, 3.4411667517902407, 3.4411667517902407, 3.4411667517902407,
      3.4411667517902407, 3.4411667517902407, 3.4411667517902407, 3.4411667517902407,
      3.4411667517902407, 3.4411667517902407, 3.4411667517902407, 3.4411667517902407,
      3.4411667517902407, 3.4411667517902407, 3.4411667517902407, 3.4411667517902407,
      3.4411667517902407, 4.1457355004793373, 4.1457355004793373, 4.1457355004793373,
      4.1457355004793373, 4.1457355004793373, 4.1457355004793373, 4.1457355004793373,
      4.1457355004793373, 4.1457355004793373, 4.1457355004793373, 4.1457355004793373,
      4.1457355004793373, 4.1457355004793373, 4.1457355004793373, 4.1457355004793373,
      4.1457355004793373, 4.1457355004793373, 4.1457355004793373, 4.1457355004793373,
      4.1457355004793373, 4.1457355004793373, 4.1457355004793373, 4.1457355004793373,
      4.1457355004793373, 6.8272781510201250, 6.8272781510201250, 6.8272781510201250,
      6.8272781510201250, 6.8272781510201250, 6.8272781510201250, 6.8272781510201250,
      6.8272781510201250, 6.8272781510201250, 6.8272781510201250, 6.8272781510201250,
      6.8272781510201250, 6.8272781510201250, 6.8272781510201250, 6.8272781510201250,
      6.8272781510201250, 6.8272781510201250, 6.8272781510201250, 6.8272781510201250,
      6.8272781510201250, 6.8272781510201250, 6.8272781510201250, 6.8272781510201250,
      6.8272781510201250, 10.900107369718414, 10.900107369718414, 10.900107369718414,
      10.900107369718414, 10.900107369718414, 10.900107369718414, 10.900107369718414,
      10.900107369718414, 10.900107369718414, 10.900107369718414, 10.900107369718414,
      10.900107369718414, 10.900107369718414, 10.900107369718414, 10.900107369718414,
      10.900107369718414, 33.055990281570203, 33.055990281570203, 33.055990281570203,
      33.055990281570203, 33.055990281570203, 33.055990281570203, 33.055990281570203,
      33.055990281570203, 33.055990281570203, 33.055990281570203, 33.055990281570203,
      33.055990281570203};

    EXPECT_EQ(correctResults.size(), aRf.size());
    for(size_t i = 0; i < size; ++i)
    {
        EXPECT_NEAR(correctResults[i], aRf(i, i), 1e-6);
    }
}
